{"mappings":"AAAA,oCAAoC;AACpC,EAAE;AACF,mDAAmD;AACnD,sCAAsC;AAEtC;;;;;;;;IAQI,GAEJ,oBAAoB;AACpB,IAAI,YAAY,MAAM,qBAAqB;AAC3C,IAAI,WAAW,yBAAyB;AACxC,IAAI,cAAc,4BAA4B;AAC9C,IAAI,iBAAiB,8BAA8B;AACnD,IAAI,eAAe,MAAM,6BAA6B;AAEtD,6DAA6D;AAC7D,IAAI,cAAc;AAClB,IAAI,eAAe;AAEnB,gBAAgB;AAChB,SAAS;IACP,8CAA8C;IAC9C,kBAAkB,OAAO;IACzB,IAAI,SAAS,aAAa,aAAa;IACvC,OAAO,MAAM,CAAC;IACd,WAAW;IAEX,6CAA6C;IAC7C,YAAY,OAAO;IACnB,eAAe,OAAO;IAEtB,iDAAiD;IACjD,uEAAuE;IACvE,MAAM,WAAW;IACjB,YAAY,IAAI,UAAU;IAE1B,mCAAmC;IACnC;IAEA,gBAAgB;IAChB,UAAU,IAAI,CAAC;AACjB;AAEA,oBAAoB;AACpB,SAAS;IACP,wBAAwB;IACxB,IAAI,MAAM;IACV,aAAa,IAAI,CAAC,UAAU,IAAI,OAAO,CAAC;AAC1C;AAEA,2BAA2B;AAC3B,SAAS;IACP,2BAA2B;IAC3B,UAAU,EAAE,CAAC,SAAS;QACpB,UAAU,IAAI,CAAC;QAEf,2DAA2D;QAC3D,UAAU,aAAa,CAAC;QAExB,iCAAiC;QACjC;IACF;IAEA,+BAA+B;IAC/B,UAAU,EAAE,CAAC,SAAS,CAAC;QACrB,UAAU,IAAI,CACZ,iDAAiD,MAAM,OAAO;IAElE;IAEA,gCAAgC;IAChC,UAAU,EAAE,CAAC,eAAe,CAAC;QAC3B,UAAU,IAAI,CACZ,gCAAgC,KAAK,EAAE,GAAG;IAE9C;AACF;AAEA,uBAAuB;AACvB,SAAS;IACP,IAAI,YAAY,OACd;SACK,IAAI,YAAY,UACrB;SACK,IAAI,YAAY,aACrB;AAEJ;AAEA,0BAA0B;AAE1B,yBAAyB;AACzB,SAAS;IACP,UAAU,IAAI,CACZ;IAEF,eAAe;IACf,UAAU,UAAU,CAAC;AACvB;AAEA,yBAAyB;AACzB,SAAS;IACP,UAAU,IAAI,CACZ;IAEF,eAAe;IACf,UAAU,UAAU,CAAC;AACvB;AAEA,mBAAmB;AACnB,SAAS;IACP,UAAU,IAAI,CACZ;IAEF,eAAe;IACf,UAAU,OAAO;IACjB,WAAW;AACb;AAEA,gCAAgC;AAChC,SAAS;IACP,UAAU,IAAI,CACZ;IAGF,UACG,UAAU,GACV,IAAI,CAAC,CAAC;QACL,IAAI,OAAO,OAAO,IAAI,OAAO,kBAAkB,EAC7C,UAAU,IAAI,CACZ;aAGF,UAAU,IAAI,CACZ;IAGN,GACC,KAAK,CAAC,CAAC;QACN,UAAU,IAAI,CACZ,iDACE,MAAM,OAAO;IAEnB;AACJ;AAEA,2BAA2B;AAC3B,SAAS,SAAS,KAAK;IACrB,gDAAgD;IAChD,UAAU,MAAM,GAAG,EAAE,SAAU,WAAW;QACxC,wDAAwD;QACxD,IACE,YAAY,KAAK,KAAK,eACtB,YAAY,MAAM,KAAK,cACvB;YACA,cAAc,YAAY,KAAK;YAC/B,eAAe,YAAY,MAAM;YACjC,aAAa,aAAa;QAC5B;QAEA,oBAAoB;QACpB,WAAW;QACX,MAAM,aAAa,GAAG;QAEtB,sBAAsB;QACtB,KAAK,GAAG,GAAG,GAAG;QACd;QACA,KAAK,IAAI,IAAI,KAAK;QAClB,KAAK;QACL,SAAS;QACT,KAAK,aAAa,cAAc,IAAI;QACpC,KAAK,CAAC,YAAY,EAAE,YAAY,CAAC,EAAE,cAAc,EAAE,IAAI;IACzD;AACF","sources":["examples/p5_examples/gettingstarted/sketch.js"],"sourcesContent":["// Copyright (c) 2019-2025 Kinectron\r\n//\r\n// This software is released under the MIT License.\r\n// https://opensource.org/licenses/MIT\r\n\r\n/* ===\r\nKinectron Getting Started Example (UMD Version)\r\nKinect Azure camera feeds example using p5.js\r\n\r\nThis example demonstrates how to:\r\n1. Connect to a Kinectron server\r\n2. Start and stop different camera feeds\r\n3. Process and display the incoming frames\r\n=== */\r\n\r\n// --- VARIABLES ---\r\nlet kinectron = null; // Kinectron instance\r\nlet statusDiv; // Status display element\r\nlet framerateDiv; // Framerate display element\r\nlet canvasContainer; // Container for the p5 canvas\r\nlet activeStream = null; // Current active stream type\r\n\r\n// Canvas dimensions - will be updated when we receive frames\r\nlet canvasWidth = 640;\r\nlet canvasHeight = 480;\r\n\r\n// --- SETUP ---\r\nfunction setup() {\r\n  // Create canvas and place it in the container\r\n  canvasContainer = select('#canvas-container');\r\n  let canvas = createCanvas(canvasWidth, canvasHeight);\r\n  canvas.parent(canvasContainer);\r\n  background(0);\r\n\r\n  // Get reference to status and framerate divs\r\n  statusDiv = select('#status');\r\n  framerateDiv = select('#framerate');\r\n\r\n  // Initialize Kinectron with local server address\r\n  // Replace with your Kinectron server IP address if not running locally\r\n  const serverIP = '127.0.0.1';\r\n  kinectron = new Kinectron(serverIP);\r\n\r\n  // Set up connection event handlers\r\n  setupConnectionEvents();\r\n\r\n  // Update status\r\n  statusDiv.html('Connection status: <strong>Connecting...</strong>');\r\n}\r\n\r\n// --- DRAW LOOP ---\r\nfunction draw() {\r\n  // Display the framerate\r\n  let fps = frameRate();\r\n  framerateDiv.html('FPS: ' + fps.toFixed(0));\r\n}\r\n\r\n// --- CONNECTION SETUP ---\r\nfunction setupConnectionEvents() {\r\n  // When connection is ready\r\n  kinectron.on('ready', () => {\r\n    statusDiv.html('Connection status: <strong>Connected</strong>');\r\n\r\n    // Set kinect type to azure after connection is established\r\n    kinectron.setKinectType('azure');\r\n\r\n    // Initialize the Kinect hardware\r\n    initializeKinect();\r\n  });\r\n\r\n  // When connection has an error\r\n  kinectron.on('error', (error) => {\r\n    statusDiv.html(\r\n      'Connection status: <strong>Error</strong> - ' + error.message,\r\n    );\r\n  });\r\n\r\n  // When connection state changes\r\n  kinectron.on('stateChange', (data) => {\r\n    statusDiv.html(\r\n      'Connection status: <strong>' + data.to + '</strong>',\r\n    );\r\n  });\r\n}\r\n\r\n// --- KEY CONTROLS ---\r\nfunction keyPressed() {\r\n  if (keyCode === ENTER) {\r\n    startColorStream();\r\n  } else if (keyCode === UP_ARROW) {\r\n    startDepthStream();\r\n  } else if (keyCode === RIGHT_ARROW) {\r\n    stopAllStreams();\r\n  }\r\n}\r\n\r\n// --- STREAM CONTROLS ---\r\n\r\n// Start the color stream\r\nfunction startColorStream() {\r\n  statusDiv.html(\r\n    'Connection status: <strong>Connected</strong> - Color stream active',\r\n  );\r\n  activeStream = 'color';\r\n  kinectron.startColor(drawFeed);\r\n}\r\n\r\n// Start the depth stream\r\nfunction startDepthStream() {\r\n  statusDiv.html(\r\n    'Connection status: <strong>Connected</strong> - Depth stream active',\r\n  );\r\n  activeStream = 'depth';\r\n  kinectron.startDepth(drawFeed);\r\n}\r\n\r\n// Stop all streams\r\nfunction stopAllStreams() {\r\n  statusDiv.html(\r\n    'Connection status: <strong>Connected</strong> - No active streams',\r\n  );\r\n  activeStream = null;\r\n  kinectron.stopAll();\r\n  background(0);\r\n}\r\n\r\n// --- KINECT INITIALIZATION ---\r\nfunction initializeKinect() {\r\n  statusDiv.html(\r\n    'Connection status: <strong>Connected</strong> - Initializing Kinect...',\r\n  );\r\n\r\n  kinectron\r\n    .initKinect()\r\n    .then((result) => {\r\n      if (result.success || result.alreadyInitialized) {\r\n        statusDiv.html(\r\n          'Connection status: <strong>Connected</strong> - Kinect initialized',\r\n        );\r\n      } else {\r\n        statusDiv.html(\r\n          'Connection status: <strong>Error</strong> - Failed to initialize Kinect',\r\n        );\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      statusDiv.html(\r\n        'Connection status: <strong>Error</strong> - ' +\r\n          error.message,\r\n      );\r\n    });\r\n}\r\n\r\n// --- FRAME PROCESSING ---\r\nfunction drawFeed(frame) {\r\n  // Load the image from the data URL in the frame\r\n  loadImage(frame.src, function (loadedImage) {\r\n    // Resize canvas if needed to match the frame dimensions\r\n    if (\r\n      loadedImage.width !== canvasWidth ||\r\n      loadedImage.height !== canvasHeight\r\n    ) {\r\n      canvasWidth = loadedImage.width;\r\n      canvasHeight = loadedImage.height;\r\n      resizeCanvas(canvasWidth, canvasHeight);\r\n    }\r\n\r\n    // Display the image\r\n    background(0);\r\n    image(loadedImage, 0, 0);\r\n\r\n    // Add an info overlay\r\n    fill(0, 0, 0, 180);\r\n    noStroke();\r\n    rect(10, 10, 250, 60);\r\n    fill(255);\r\n    textSize(16);\r\n    text('Stream: ' + activeStream, 20, 30);\r\n    text(`Resolution: ${canvasWidth}x${canvasHeight}`, 20, 55);\r\n  });\r\n}\r\n"],"names":[],"version":3,"file":"gettingstarted.b18ee69c.js.map","sourceRoot":"/__parcel_source_root/"}