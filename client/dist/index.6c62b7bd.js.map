{"mappings":"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","sources":["examples/streamTest/js/controllers/uiController.js"],"sourcesContent":["/**\r\n * UIController\r\n * Handles UI elements, button states, and status updates\r\n */\r\nclass UIController {\r\n  constructor() {\r\n    // Cache DOM elements\r\n    this.elements = {\r\n      initializeKinectBtn: document.getElementById(\r\n        'initializeKinectBtn',\r\n      ),\r\n      startColorBtn: document.getElementById('startColorBtn'),\r\n      startDepthBtn: document.getElementById('startDepthBtn'),\r\n      startRawDepthBtn: document.getElementById('startRawDepthBtn'),\r\n      stopStreamBtn: document.getElementById('stopStreamBtn'),\r\n      connectionStatus: document.getElementById('connectionStatus'),\r\n      streamStatus: document.getElementById('streamStatus'),\r\n      frameRate: document.getElementById('frameRate'),\r\n      resolution: document.getElementById('resolution'),\r\n      debugToggle: document.getElementById('debugToggle'),\r\n      debugPerformance: document.getElementById('debugPerformance'),\r\n      debugData: document.getElementById('debugData'),\r\n      debugPeer: document.getElementById('debugPeer'),\r\n    };\r\n\r\n    // Flag to track if Kinect is initialized\r\n    this.isKinectInitialized = false;\r\n  }\r\n\r\n  /**\r\n   * Initialize the controller\r\n   * @returns {UIController} - The initialized controller instance\r\n   */\r\n  static initialize() {\r\n    const controller = new UIController();\r\n    return controller;\r\n  }\r\n\r\n  /**\r\n   * Set up event handlers for UI elements\r\n   * @param {Object} handlers - Object containing event handler functions\r\n   */\r\n  setupEventHandlers(handlers) {\r\n    // Initialize Kinect button\r\n    const initializeKinectBtn = document.getElementById(\r\n      'initializeKinectBtn',\r\n    );\r\n    if (initializeKinectBtn && handlers.initializeKinect) {\r\n      initializeKinectBtn.addEventListener(\r\n        'click',\r\n        handlers.initializeKinect,\r\n      );\r\n    }\r\n\r\n    // Stream control buttons\r\n    if (this.elements.startColorBtn && handlers.startColorStream) {\r\n      this.elements.startColorBtn.addEventListener(\r\n        'click',\r\n        handlers.startColorStream,\r\n      );\r\n    }\r\n\r\n    if (this.elements.startDepthBtn && handlers.startDepthStream) {\r\n      this.elements.startDepthBtn.addEventListener(\r\n        'click',\r\n        handlers.startDepthStream,\r\n      );\r\n    }\r\n\r\n    if (\r\n      this.elements.startRawDepthBtn &&\r\n      handlers.startRawDepthStream\r\n    ) {\r\n      this.elements.startRawDepthBtn.addEventListener(\r\n        'click',\r\n        handlers.startRawDepthStream,\r\n      );\r\n    }\r\n\r\n    if (this.elements.stopStreamBtn && handlers.stopStream) {\r\n      this.elements.stopStreamBtn.addEventListener(\r\n        'click',\r\n        handlers.stopStream,\r\n      );\r\n    }\r\n\r\n    // Debug panel buttons\r\n    const forceEnableBtn = document.getElementById('forceEnableBtn');\r\n    if (forceEnableBtn && handlers.forceEnableButtons) {\r\n      forceEnableBtn.addEventListener(\r\n        'click',\r\n        handlers.forceEnableButtons,\r\n      );\r\n    }\r\n\r\n    const clearDebugBtn = document.getElementById('clearDebugBtn');\r\n    if (clearDebugBtn && handlers.clearDebugInfo) {\r\n      clearDebugBtn.addEventListener(\r\n        'click',\r\n        handlers.clearDebugInfo,\r\n      );\r\n    }\r\n\r\n    // Debug checkboxes\r\n    if (this.elements.debugToggle && handlers.toggleDebug) {\r\n      this.elements.debugToggle.addEventListener('change', (e) =>\r\n        handlers.toggleDebug(e.target.checked),\r\n      );\r\n    }\r\n\r\n    if (\r\n      this.elements.debugPerformance &&\r\n      handlers.togglePerformanceDebug\r\n    ) {\r\n      this.elements.debugPerformance.addEventListener('change', (e) =>\r\n        handlers.togglePerformanceDebug(e.target.checked),\r\n      );\r\n    }\r\n\r\n    if (this.elements.debugData && handlers.toggleDataDebug) {\r\n      this.elements.debugData.addEventListener('change', (e) =>\r\n        handlers.toggleDataDebug(e.target.checked),\r\n      );\r\n    }\r\n\r\n    if (this.elements.debugPeer && handlers.togglePeerDebug) {\r\n      this.elements.debugPeer.addEventListener('change', (e) =>\r\n        handlers.togglePeerDebug(e.target.checked),\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update connection status display\r\n   * @param {string} status - Status message to display\r\n   * @param {boolean} isSuccess - Whether the status represents a success state\r\n   */\r\n  updateConnectionStatus(status, isSuccess = false) {\r\n    if (this.elements.connectionStatus) {\r\n      this.elements.connectionStatus.innerHTML = isSuccess\r\n        ? `<span class=\"success\">Connection Status: ${status}</span>`\r\n        : `<span class=\"error\">Connection Status: ${status}</span>`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update stream status display\r\n   * @param {string} status - Status message to display\r\n   * @param {boolean} isSuccess - Whether the status represents a success state\r\n   */\r\n  updateStreamStatus(status, isSuccess = false) {\r\n    if (this.elements.streamStatus) {\r\n      this.elements.streamStatus.innerHTML = isSuccess\r\n        ? `<span class=\"success\">Stream Status: ${status}</span>`\r\n        : `Stream Status: ${status}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update frame rate display\r\n   * @param {string} frameRate - Frame rate information to display\r\n   */\r\n  updateFrameRate(frameRate) {\r\n    if (this.elements.frameRate) {\r\n      this.elements.frameRate.textContent = `Frame Rate: ${frameRate}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update resolution display\r\n   * @param {string} resolution - Resolution information to display\r\n   */\r\n  updateResolution(resolution) {\r\n    if (this.elements.resolution) {\r\n      this.elements.resolution.textContent = `Resolution: ${resolution}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enable the Initialize Kinect button\r\n   * This is called when the peer connection is established\r\n   */\r\n  enableInitializeKinectButton() {\r\n    if (this.elements.initializeKinectBtn) {\r\n      this.elements.initializeKinectBtn.disabled = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enable stream control buttons\r\n   * @param {boolean} force - Whether to force enable buttons regardless of Kinect initialization status\r\n   */\r\n  enableStreamButtons(force = false) {\r\n    // Only enable buttons if Kinect is initialized or if force is true\r\n    if (this.isKinectInitialized || force) {\r\n      console.log(\r\n        'Enabling stream buttons - Kinect initialized:',\r\n        this.isKinectInitialized,\r\n        'Force:',\r\n        force,\r\n      );\r\n      if (this.elements.startColorBtn)\r\n        this.elements.startColorBtn.disabled = false;\r\n      if (this.elements.startDepthBtn)\r\n        this.elements.startDepthBtn.disabled = false;\r\n      if (this.elements.startRawDepthBtn)\r\n        this.elements.startRawDepthBtn.disabled = false;\r\n      if (this.elements.stopStreamBtn)\r\n        this.elements.stopStreamBtn.disabled = false;\r\n    } else {\r\n      console.log(\r\n        'Not enabling buttons - Kinect not initialized and not forced',\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set Kinect initialization status\r\n   * @param {boolean} status - Whether Kinect is initialized\r\n   */\r\n  setKinectInitialized(status) {\r\n    console.log('Setting Kinect initialized status to:', status);\r\n    this.isKinectInitialized = status;\r\n  }\r\n\r\n  /**\r\n   * Disable stream control buttons\r\n   */\r\n  disableStreamButtons() {\r\n    if (this.elements.startColorBtn)\r\n      this.elements.startColorBtn.disabled = true;\r\n    if (this.elements.startDepthBtn)\r\n      this.elements.startDepthBtn.disabled = true;\r\n    if (this.elements.startRawDepthBtn)\r\n      this.elements.startRawDepthBtn.disabled = true;\r\n    if (this.elements.stopStreamBtn)\r\n      this.elements.stopStreamBtn.disabled = true;\r\n  }\r\n\r\n  /**\r\n   * Force enable buttons (used as a fallback)\r\n   */\r\n  forceEnableButtons() {\r\n    console.log('Force enabling buttons');\r\n    this.enableStreamButtons(true);\r\n  }\r\n\r\n  /**\r\n   * Check if buttons are disabled\r\n   * @returns {boolean} - True if any stream button is disabled\r\n   */\r\n  areButtonsDisabled() {\r\n    return (\r\n      (this.elements.startColorBtn &&\r\n        this.elements.startColorBtn.disabled) ||\r\n      (this.elements.startDepthBtn &&\r\n        this.elements.startDepthBtn.disabled) ||\r\n      (this.elements.startRawDepthBtn &&\r\n        this.elements.startRawDepthBtn.disabled) ||\r\n      (this.elements.stopStreamBtn &&\r\n        this.elements.stopStreamBtn.disabled)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Enable debug controls\r\n   * @param {boolean} enabled - Whether debug is enabled\r\n   */\r\n  enableDebugControls(enabled) {\r\n    if (this.elements.debugPerformance) {\r\n      this.elements.debugPerformance.disabled = !enabled;\r\n    }\r\n\r\n    if (this.elements.debugData) {\r\n      this.elements.debugData.disabled = !enabled;\r\n    }\r\n\r\n    if (this.elements.debugPeer) {\r\n      this.elements.debugPeer.disabled = !enabled;\r\n    }\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"index.6c62b7bd.js.map","sourceRoot":"/__parcel_source_root/"}