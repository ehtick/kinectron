{"mappings":"AAAA;;;CAGC,GACD,MAAM;IACJ,aAAc;QACZ,4BAA4B;QAC5B,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,UAAU,GAAG;QAElB,sBAAsB;QACtB,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,UAAU,GAAG;QAElB,YAAY;QACZ,IAAI,CAAC,iBAAiB,GAAG;QACzB,IAAI,CAAC,kBAAkB,GAAG;QAC1B,IAAI,CAAC,iBAAiB,GAAG;QACzB,IAAI,CAAC,kBAAkB,GAAG;QAC1B,IAAI,CAAC,aAAa,GAAG;IACvB;IAEA;;;GAGC,GACD,OAAO,aAAa;QAClB,MAAM,aAAa,IAAI;QACvB,WAAW,QAAQ;QACnB,OAAO;IACT;IAEA;;;GAGC,GACD,WAAW;QACT,sBAAsB;QACtB,MAAM,SAAS,CAAC;YACd,wBAAwB;YACxB,IAAI,CAAC,UAAU,GAAG;YAElB,EAAE,KAAK,GAAG;gBACR,gBAAgB;gBAChB,IAAI,CAAC,MAAM,GAAG,EAAE,YAAY,CAC1B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,aAAa,EAC3C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,aAAa;gBAE9C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;gBACnB,EAAE,YAAY,CAAC;gBACf,EAAE,UAAU,CAAC;YACf;YAEA,EAAE,IAAI,GAAG;gBACP,iDAAiD;gBACjD,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACjB,EAAE,IAAI,CAAC;oBACP,EAAE,QAAQ,CAAC;oBACX,EAAE,IAAI,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI;gBAC3C;YACF;QACF;QAEA,yBAAyB;QACzB,IAAI,GAAG;IACT;IAEA;;;;GAIC,GACD,aAAa,KAAK,EAAE,MAAM,EAAE;QAC1B,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,OAAO;YACpC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;QAC7B;IACF;IAEA;;GAEC,GACD,cAAc;QACZ,IAAI,IAAI,CAAC,UAAU,EACjB,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;IAE/B;IAEA;;;GAGC,GACD,kBAAkB,KAAK,EAAE;QACvB,IAAI,IAAI,CAAC,UAAU,IAAI,MAAM,GAAG,EAC9B,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC;YACpC,eAAe;YACf,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;YAC3B,iBAAiB;YACjB,IAAI,CAAC,UAAU,CAAC,KAAK,CACnB,aACA,GACA,GACA,IAAI,CAAC,UAAU,CAAC,KAAK,EACrB,IAAI,CAAC,UAAU,CAAC,MAAM;YAGxB,qBAAqB;YACrB,IAAI,CAAC,UAAU;YAEf,mBAAmB;YACnB,IAAI,CAAC,SAAS,CAAC;YAEf,IAAI,OAAO,KAAK,IAAI,OAAO,KAAK,CAAC,SAAS,EACxC,QAAQ,GAAG,CACT,CAAC,mBAAmB,EAAE,YAAY,KAAK,CAAC,CAAC,EAAE,YAAY,MAAM,EAAE;QAGrE;aAEA,QAAQ,IAAI,CACV;IAGN;IAEA;;;GAGC,GACD,kBAAkB,KAAK,EAAE;QACvB,IAAI,IAAI,CAAC,UAAU,IAAI,MAAM,GAAG,EAC9B,IAAI,CAAC,UAAU,CAAC,SAAS,CACvB,MAAM,GAAG,EACT,CAAC;YACC,eAAe;YACf,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;YAC3B,iBAAiB;YACjB,IAAI,CAAC,UAAU,CAAC,KAAK,CACnB,aACA,GACA,GACA,IAAI,CAAC,UAAU,CAAC,KAAK,EACrB,IAAI,CAAC,UAAU,CAAC,MAAM;YAGxB,qBAAqB;YACrB,IAAI,CAAC,UAAU;YAEf,mBAAmB;YACnB,IAAI,CAAC,SAAS,CAAC;YAEf,IAAI,OAAO,KAAK,IAAI,OAAO,KAAK,CAAC,SAAS,EACxC,QAAQ,GAAG,CACT,CAAC,mBAAmB,EAAE,YAAY,KAAK,CAAC,CAAC,EAAE,YAAY,MAAM,EAAE;QAGrE,GACA,CAAC;YACC,QAAQ,KAAK,CAAC,CAAC,2BAA2B,EAAE,KAAK;QACnD;aAGF,QAAQ,IAAI,CACV;IAGN;IAEA;;;GAGC,GACD,qBAAqB,KAAK,EAAE;QAC1B,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,QAAQ,KAAK,CACX;YAEF;QACF;QAEA,eAAe;QACf,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;QAE3B,uEAAuE;QACvE,QAAQ,KAAK,CAAC;QACd,QAAQ,KAAK,CAAC,UAAU;QACxB,QAAQ,KAAK,CAAC,WAAW,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,MAAM,GAAG;QAE9D,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,CAAC,MAAM,GAAG,GAAG;YAC3C,MAAM,YAAY,MAAM,MAAM,CAAC,EAAE;YACjC,QAAQ,KAAK,CAAC,kBAAkB,UAAU,EAAE;YAC5C,QAAQ,KAAK,CAAC,iBAAiB,CAAC,CAAC,UAAU,QAAQ;YAEnD,IAAI,UAAU,QAAQ,IAAI,UAAU,QAAQ,CAAC,MAAM,EAAE;gBACnD,QAAQ,KAAK,CACX,iBACA,UAAU,QAAQ,CAAC,MAAM,CAAC,MAAM;gBAElC,QAAQ,KAAK,CAAC,gBAAgB,UAAU,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAE1D,wCAAwC;gBACxC,MAAM,aAAa,UAAU,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAC/C,QAAQ,KAAK,CAAC,qBAAqB,YAAY;gBAC/C,QAAQ,KAAK,CAAC,qBAAqB,YAAY;gBAC/C,QAAQ,KAAK,CAAC,sBAAsB,aAAa;gBACjD,QAAQ,KAAK,CAAC,sBAAsB,aAAa;YACnD;QACF;QAEA,iCAAiC;QACjC,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,CAAC,MAAM,GAAG,GAAG;YAC3C,8BAA8B;YAC9B,MAAM,SAAS;gBACb,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG;gBAC9B,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,KAAK;gBAC9B,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,GAAG;gBAC5B,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,KAAK;gBAChC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,KAAK;gBAC9B,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG;aAC/B;YAED,IAAI;gBACF,iBAAiB;gBACjB,MAAM,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM;oBAC1B,MAAM,QAAQ,MAAM,CAAC,QAAQ,OAAO,MAAM,CAAC;oBAC3C,IAAI,CAAC,mBAAmB,CAAC,MAAM;gBACjC;gBAEA,qBAAqB;gBACrB,IAAI,CAAC,UAAU;gBAEf,mBAAmB;gBACnB,IAAI,CAAC,SAAS,CAAC;gBAEf,QAAQ,KAAK,CACX,CAAC,gBAAgB,EAAE,MAAM,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC;YAEnD,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,2BAA2B;YAC3C;QACF,OACE,QAAQ,KAAK,CAAC;IAElB;IAEA;;;;;GAKC,GACD,cAAc,IAAI,EAAE,KAAK,EAAE;QACzB,IAAI,CAAC,KAAK,QAAQ,IAAI,CAAC,KAAK,QAAQ,CAAC,MAAM,EAAE;YAC3C,QAAQ,IAAI,CAAC;YACb;QACF;QAEA,MAAM,MAAK,IAAI,CAAC,UAAU;QAC1B,MAAM,SAAS,KAAK,QAAQ,CAAC,MAAM;QAEnC,IAAI,OAAO,KAAK,IAAI,OAAO,KAAK,CAAC,IAAI,EAAE;YACrC,QAAQ,KAAK,CAAC;YACd,QAAQ,GAAG,CAAC,YAAY,KAAK,EAAE;YAC/B,QAAQ,GAAG,CAAC,iBAAiB,OAAO,MAAM;YAC1C,QAAQ,GAAG,CAAC,qBAAqB,OAAO,KAAK,CAAC,GAAG;YACjD,QAAQ,QAAQ;QAClB;QAEA,cAAc;QACd,IAAG,IAAI,CAAC;QACR,IAAG,QAAQ;QAEX,OAAO,OAAO,CAAC,CAAC,OAAO;YACrB,6CAA6C;YAC7C,IAAI,YAAY,SAAS,YAAY,OAAO;gBAC1C,yCAAyC;gBACzC,MAAM,IAAI,MAAM,MAAM,GAAG,IAAG,KAAK;gBACjC,MAAM,IAAI,MAAM,MAAM,GAAG,IAAG,MAAM;gBAElC,aAAa;gBACb,IAAG,OAAO,CAAC,GAAG,GAAG,IAAI;YACvB,OAAO,IAAI,aAAa,SAAS,aAAa,OAAO;gBACnD,6EAA6E;gBAC7E,yDAAyD;gBAEzD,wBAAwB;gBACxB,MAAM,cAAc,IAAG,KAAK;gBAC5B,MAAM,eAAe,IAAG,MAAM;gBAE9B,yCAAyC;gBACzC,qEAAqE;gBACrE,MAAM,cAAc,KAAK,8BAA8B;gBACvD,MAAM,UAAU,cAAc;gBAC9B,MAAM,UAAU,eAAe;gBAE/B,MAAM,IAAI,UAAU,MAAM,OAAO,GAAG;gBACpC,MAAM,IAAI,UAAU,MAAM,OAAO,GAAG;gBAEpC,aAAa;gBACb,IAAG,OAAO,CAAC,GAAG,GAAG,IAAI;gBAErB,IAAI,OAAO,KAAK,IAAI,OAAO,KAAK,CAAC,IAAI,IAAI,UAAU,GACjD,QAAQ,GAAG,CACT,CAAC,mCAAmC,EAAE,MAAM,IAAI,EAAE,EAAE,IAAI,EAAE,GAAG;YAGnE,OACE,IAAI,OAAO,KAAK,IAAI,OAAO,KAAK,CAAC,IAAI,IAAI,UAAU,GACjD,QAAQ,IAAI,CACV,CAAC,MAAM,EAAE,MAAM,yBAAyB,CAAC,EACzC;QAIR;QAEA,mDAAmD;QACnD,IAAG,MAAM,CAAC;QACV,IAAG,YAAY,CAAC;QAEhB,8CAA8C;QAC9C,MAAM,cAAc;YAClB,QAAQ;YACR;gBAAC;gBAAG;aAAE;YACN;gBAAC;gBAAG;aAAG;YACP;gBAAC;gBAAI;aAAE;YACP;gBAAC;gBAAG;aAAE;YACN,WAAW;YACX;gBAAC;gBAAI;aAAE;YACP;gBAAC;gBAAG;aAAE;YACN;gBAAC;gBAAG;aAAE;YACN;gBAAC;gBAAG;aAAE;YACN;gBAAC;gBAAG;aAAG;YACP;gBAAC;gBAAG;aAAG;YACP,YAAY;YACZ;gBAAC;gBAAI;aAAE;YACP;gBAAC;gBAAG;aAAE;YACN;gBAAC;gBAAG;aAAG;YACP;gBAAC;gBAAI;aAAG;YACR;gBAAC;gBAAI;aAAG;YACR;gBAAC;gBAAI;aAAG;YACR,WAAW;YACX;gBAAC;gBAAG;aAAG;YACP;gBAAC;gBAAI;aAAG;YACR;gBAAC;gBAAI;aAAG;YACR;gBAAC;gBAAI;aAAG;YACR,YAAY;YACZ;gBAAC;gBAAG;aAAG;YACP;gBAAC;gBAAI;aAAG;YACR;gBAAC;gBAAI;aAAG;YACR;gBAAC;gBAAI;aAAG;SACT;QAED,6BAA6B;QAC7B,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE;YACzB,IAAI,MAAM,CAAC,EAAE,IAAI,MAAM,CAAC,EAAE,EAAE;gBAC1B,6CAA6C;gBAC7C,IACE,YAAY,MAAM,CAAC,EAAE,IACrB,YAAY,MAAM,CAAC,EAAE,IACrB,YAAY,MAAM,CAAC,EAAE,IACrB,YAAY,MAAM,CAAC,EAAE,EAErB,IAAG,IAAI,CACL,MAAM,CAAC,EAAE,CAAC,MAAM,GAAG,IAAG,KAAK,EAC3B,MAAM,CAAC,EAAE,CAAC,MAAM,GAAG,IAAG,MAAM,EAC5B,MAAM,CAAC,EAAE,CAAC,MAAM,GAAG,IAAG,KAAK,EAC3B,MAAM,CAAC,EAAE,CAAC,MAAM,GAAG,IAAG,MAAM;qBAEzB,IACL,aAAa,MAAM,CAAC,EAAE,IACtB,aAAa,MAAM,CAAC,EAAE,IACtB,aAAa,MAAM,CAAC,EAAE,IACtB,aAAa,MAAM,CAAC,EAAE,EACtB;oBACA,iCAAiC;oBACjC,MAAM,cAAc,KAAK,8BAA8B;oBACvD,MAAM,UAAU,IAAG,KAAK,GAAG;oBAC3B,MAAM,UAAU,IAAG,MAAM,GAAG;oBAE5B,MAAM,KAAK,UAAU,MAAM,CAAC,EAAE,CAAC,OAAO,GAAG;oBACzC,MAAM,KAAK,UAAU,MAAM,CAAC,EAAE,CAAC,OAAO,GAAG;oBACzC,MAAM,KAAK,UAAU,MAAM,CAAC,EAAE,CAAC,OAAO,GAAG;oBACzC,MAAM,KAAK,UAAU,MAAM,CAAC,EAAE,CAAC,OAAO,GAAG;oBAEzC,IAAG,IAAI,CAAC,IAAI,IAAI,IAAI;gBACtB;YACF;QACF;IACF;IAEA;;;;;GAKC,GACD,oBAAoB,IAAI,EAAE,KAAK,EAAE;QAC/B,IAAI,CAAC,KAAK,QAAQ,IAAI,CAAC,KAAK,QAAQ,CAAC,MAAM,EAAE;YAC3C,QAAQ,KAAK,CAAC;YACd;QACF;QAEA,MAAM,MAAK,IAAI,CAAC,UAAU;QAC1B,MAAM,SAAS,KAAK,QAAQ,CAAC,MAAM;QAEnC,QAAQ,KAAK,CACX,gCACA,OAAO,MAAM,EACb;QAGF,4BAA4B;QAC5B,IAAG,IAAI,CAAC;QACR,IAAG,QAAQ;QAEX,OAAO,OAAO,CAAC,CAAC,OAAO;YACrB,IAAI;gBACF,IAAI,GAAG;gBAEP,mCAAmC;gBACnC,IAAI,YAAY,SAAS,YAAY,OAAO;oBAC1C,yCAAyC;oBACzC,IAAI,MAAM,MAAM,GAAG,IAAG,KAAK;oBAC3B,IAAI,MAAM,MAAM,GAAG,IAAG,MAAM;oBAC5B,QAAQ,KAAK,CAAC,CAAC,MAAM,EAAE,MAAM,iBAAiB,EAAE,EAAE,EAAE,EAAE,GAAG;gBAC3D,OAAO,IAAI,aAAa,SAAS,aAAa,OAAO;oBACnD,6CAA6C;oBAC7C,MAAM,cAAc,OAAO,mDAAmD;oBAC9E,MAAM,UAAU,IAAG,KAAK,GAAG;oBAC3B,MAAM,UAAU,IAAG,MAAM,GAAG;oBAE5B,IAAI,UAAU,MAAM,OAAO,GAAG;oBAC9B,IAAI,UAAU,MAAM,OAAO,GAAG;oBAC9B,QAAQ,KAAK,CAAC,CAAC,MAAM,EAAE,MAAM,kBAAkB,EAAE,EAAE,EAAE,EAAE,GAAG;gBAC5D,OAAO,IAAI,YAAY,SAAS,YAAY,OAAO;oBACjD,yCAAyC;oBACzC,IAAI,MAAM,MAAM,GAAG,IAAG,KAAK;oBAC3B,IAAI,MAAM,MAAM,GAAG,IAAG,MAAM;oBAC5B,QAAQ,KAAK,CAAC,CAAC,MAAM,EAAE,MAAM,iBAAiB,EAAE,EAAE,EAAE,EAAE,GAAG;gBAC3D,OAAO;oBACL,2CAA2C;oBAC3C,QAAQ,KAAK,CAAC,CAAC,MAAM,EAAE,MAAM,0BAA0B,CAAC;oBACxD;gBACF;gBAEA,iCAAiC;gBACjC,IAAG,OAAO,CAAC,GAAG,GAAG,IAAI;gBAErB,2BAA2B;gBAC3B,IAAG,IAAI,CAAC,MAAM,aAAa;gBAC3B,IAAG,QAAQ,CAAC;gBACZ,IAAG,IAAI,CAAC,MAAM,QAAQ,IAAI,GAAG;gBAE7B,kCAAkC;gBAClC,IAAG,IAAI,CAAC;YACV,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,CAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC,EAAE;YACjD;QACF;IACF;IAEA;;;GAGC,GACD,UAAU,MAAM,EAAE;QAChB,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,QACH,IAAI,CAAC,UAAU,GAAG;IAEtB;AACF","sources":["examples/streamTest/js/visualizers/p5Visualizer.js"],"sourcesContent":["/**\r\n * P5Visualizer\r\n * Handles p5.js visualization for color and depth streams\r\n */\r\nclass P5Visualizer {\r\n  constructor() {\r\n    // p5.js canvas and instance\r\n    this.canvas = null;\r\n    this.p5Instance = null;\r\n\r\n    // Visualization state\r\n    this.isActive = false;\r\n    this.frameCount = 0;\r\n\r\n    // Constants\r\n    this.AZURE_COLOR_WIDTH = 1280;\r\n    this.AZURE_COLOR_HEIGHT = 720;\r\n    this.AZURE_DEPTH_WIDTH = 640;\r\n    this.AZURE_DEPTH_HEIGHT = 576;\r\n    this.DISPLAY_SCALE = 0.5;\r\n  }\r\n\r\n  /**\r\n   * Initialize the visualizer\r\n   * @returns {P5Visualizer} - The initialized visualizer instance\r\n   */\r\n  static initialize() {\r\n    const visualizer = new P5Visualizer();\r\n    visualizer._setupP5();\r\n    return visualizer;\r\n  }\r\n\r\n  /**\r\n   * Set up p5.js canvas and sketch\r\n   * @private\r\n   */\r\n  _setupP5() {\r\n    // Define p5.js sketch\r\n    const sketch = (p) => {\r\n      // Store the p5 instance\r\n      this.p5Instance = p;\r\n\r\n      p.setup = () => {\r\n        // Create canvas\r\n        this.canvas = p.createCanvas(\r\n          this.AZURE_COLOR_WIDTH * this.DISPLAY_SCALE,\r\n          this.AZURE_COLOR_HEIGHT * this.DISPLAY_SCALE,\r\n        );\r\n        this.canvas.parent('canvas-container');\r\n        p.pixelDensity(1);\r\n        p.background(255);\r\n      };\r\n\r\n      p.draw = () => {\r\n        // Draw frame count in corner if stream is active\r\n        if (this.isActive) {\r\n          p.fill(0);\r\n          p.textSize(14);\r\n          p.text(`Frames: ${this.frameCount}`, 10, 20);\r\n        }\r\n      };\r\n    };\r\n\r\n    // Create new p5 instance\r\n    new p5(sketch);\r\n  }\r\n\r\n  /**\r\n   * Resize canvas\r\n   * @param {number} width - Canvas width\r\n   * @param {number} height - Canvas height\r\n   */\r\n  resizeCanvas(width, height) {\r\n    if (this.p5Instance) {\r\n      this.p5Instance.resizeCanvas(width, height);\r\n      this.p5Instance.background(255);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear canvas\r\n   */\r\n  clearCanvas() {\r\n    if (this.p5Instance) {\r\n      this.p5Instance.background(255);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display color frame\r\n   * @param {Object} frame - Color frame data\r\n   */\r\n  displayColorFrame(frame) {\r\n    if (this.p5Instance && frame.src) {\r\n      this.p5Instance.loadImage(frame.src, (loadedImage) => {\r\n        // Clear canvas\r\n        this.p5Instance.background(255);\r\n        // Draw the image\r\n        this.p5Instance.image(\r\n          loadedImage,\r\n          0,\r\n          0,\r\n          this.p5Instance.width,\r\n          this.p5Instance.height,\r\n        );\r\n\r\n        // Update frame count\r\n        this.frameCount++;\r\n\r\n        // Set active state\r\n        this.setActive(true);\r\n\r\n        if (window.DEBUG && window.DEBUG.RAW_DEPTH) {\r\n          console.log(\r\n            `Color image drawn: ${loadedImage.width}x${loadedImage.height}`,\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      console.warn(\r\n        'Cannot display color frame: p5 instance or frame source not available',\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display depth frame\r\n   * @param {Object} frame - Depth frame data\r\n   */\r\n  displayDepthFrame(frame) {\r\n    if (this.p5Instance && frame.src) {\r\n      this.p5Instance.loadImage(\r\n        frame.src,\r\n        (loadedImage) => {\r\n          // Clear canvas\r\n          this.p5Instance.background(255);\r\n          // Draw the image\r\n          this.p5Instance.image(\r\n            loadedImage,\r\n            0,\r\n            0,\r\n            this.p5Instance.width,\r\n            this.p5Instance.height,\r\n          );\r\n\r\n          // Update frame count\r\n          this.frameCount++;\r\n\r\n          // Set active state\r\n          this.setActive(true);\r\n\r\n          if (window.DEBUG && window.DEBUG.RAW_DEPTH) {\r\n            console.log(\r\n              `Depth image drawn: ${loadedImage.width}x${loadedImage.height}`,\r\n            );\r\n          }\r\n        },\r\n        (err) => {\r\n          console.error(`Error loading depth image: ${err}`);\r\n        },\r\n      );\r\n    } else {\r\n      console.warn(\r\n        'Cannot display depth frame: p5 instance or frame source not available',\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display skeleton frame\r\n   * @param {Object} frame - Skeleton frame data with bodies array\r\n   */\r\n  displaySkeletonFrame(frame) {\r\n    if (!this.p5Instance) {\r\n      console.error(\r\n        'Cannot display skeleton: p5 instance not available',\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Clear canvas\r\n    this.p5Instance.background(255);\r\n\r\n    // Always log this regardless of debug flags to help diagnose the issue\r\n    console.error('P5Visualizer: displaySkeletonFrame called');\r\n    console.error('Frame:', frame);\r\n    console.error('Bodies:', frame.bodies ? frame.bodies.length : 0);\r\n\r\n    if (frame.bodies && frame.bodies.length > 0) {\r\n      const firstBody = frame.bodies[0];\r\n      console.error('First body ID:', firstBody.id);\r\n      console.error('Has skeleton:', !!firstBody.skeleton);\r\n\r\n      if (firstBody.skeleton && firstBody.skeleton.joints) {\r\n        console.error(\r\n          'Joints count:',\r\n          firstBody.skeleton.joints.length,\r\n        );\r\n        console.error('First joint:', firstBody.skeleton.joints[0]);\r\n\r\n        // Check for specific properties we need\r\n        const firstJoint = firstBody.skeleton.joints[0];\r\n        console.error('Joint has depthX:', 'depthX' in firstJoint);\r\n        console.error('Joint has depthY:', 'depthY' in firstJoint);\r\n        console.error('Joint has cameraX:', 'cameraX' in firstJoint);\r\n        console.error('Joint has cameraY:', 'cameraY' in firstJoint);\r\n      }\r\n    }\r\n\r\n    // Draw skeletons if bodies exist\r\n    if (frame.bodies && frame.bodies.length > 0) {\r\n      // Colors for different bodies\r\n      const colors = [\r\n        this.p5Instance.color(255, 0, 0), // Red\r\n        this.p5Instance.color(0, 255, 0), // Green\r\n        this.p5Instance.color(0, 0, 255), // Blue\r\n        this.p5Instance.color(255, 255, 0), // Yellow\r\n        this.p5Instance.color(0, 255, 255), // Cyan\r\n        this.p5Instance.color(255, 0, 255), // Magenta\r\n      ];\r\n\r\n      try {\r\n        // Draw each body\r\n        frame.bodies.forEach((body, index) => {\r\n          const color = colors[index % colors.length];\r\n          this._drawSimpleSkeleton(body, color);\r\n        });\r\n\r\n        // Update frame count\r\n        this.frameCount++;\r\n\r\n        // Set active state\r\n        this.setActive(true);\r\n\r\n        console.error(\r\n          `Skeleton drawn: ${frame.bodies.length} bodies`,\r\n        );\r\n      } catch (error) {\r\n        console.error('Error drawing skeleton:', error);\r\n      }\r\n    } else {\r\n      console.error('No bodies in skeleton frame');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw a single skeleton\r\n   * @private\r\n   * @param {Object} body - Body data with skeleton information\r\n   * @param {p5.Color} color - Color to use for this skeleton\r\n   */\r\n  _drawSkeleton(body, color) {\r\n    if (!body.skeleton || !body.skeleton.joints) {\r\n      console.warn('No skeleton joints in body data');\r\n      return;\r\n    }\r\n\r\n    const p5 = this.p5Instance;\r\n    const joints = body.skeleton.joints;\r\n\r\n    if (window.DEBUG && window.DEBUG.DATA) {\r\n      console.group('P5Visualizer: _drawSkeleton');\r\n      console.log('Body ID:', body.id);\r\n      console.log('Joints count:', joints.length);\r\n      console.log('First few joints:', joints.slice(0, 3));\r\n      console.groupEnd();\r\n    }\r\n\r\n    // Draw joints\r\n    p5.fill(color);\r\n    p5.noStroke();\r\n\r\n    joints.forEach((joint, index) => {\r\n      // Check if we have depthX/depthY coordinates\r\n      if ('depthX' in joint && 'depthY' in joint) {\r\n        // Scale joint coordinates to canvas size\r\n        const x = joint.depthX * p5.width;\r\n        const y = joint.depthY * p5.height;\r\n\r\n        // Draw joint\r\n        p5.ellipse(x, y, 10, 10);\r\n      } else if ('cameraX' in joint && 'cameraY' in joint) {\r\n        // If we don't have depthX/depthY but have cameraX/cameraY, use those instead\r\n        // This is a fallback that uses a simple scaling approach\r\n\r\n        // Get canvas dimensions\r\n        const canvasWidth = p5.width;\r\n        const canvasHeight = p5.height;\r\n\r\n        // Scale camera coordinates to fit canvas\r\n        // Note: This is a very simplified approach and might need adjustment\r\n        const scaleFactor = 0.5; // Adjust this value as needed\r\n        const centerX = canvasWidth / 2;\r\n        const centerY = canvasHeight / 2;\r\n\r\n        const x = centerX + joint.cameraX * scaleFactor;\r\n        const y = centerY + joint.cameraY * scaleFactor;\r\n\r\n        // Draw joint\r\n        p5.ellipse(x, y, 10, 10);\r\n\r\n        if (window.DEBUG && window.DEBUG.DATA && index === 0) {\r\n          console.log(\r\n            `Using camera coordinates for joint ${index}: x=${x}, y=${y}`,\r\n          );\r\n        }\r\n      } else {\r\n        if (window.DEBUG && window.DEBUG.DATA && index === 0) {\r\n          console.warn(\r\n            `Joint ${index} missing coordinate data:`,\r\n            joint,\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    // Draw connections between joints (bone structure)\r\n    p5.stroke(color);\r\n    p5.strokeWeight(3);\r\n\r\n    // Define connections (pairs of joint indices)\r\n    const connections = [\r\n      // Torso\r\n      [0, 1],\r\n      [1, 20],\r\n      [20, 2],\r\n      [2, 3],\r\n      // Left arm\r\n      [20, 4],\r\n      [4, 5],\r\n      [5, 6],\r\n      [6, 7],\r\n      [7, 21],\r\n      [6, 22],\r\n      // Right arm\r\n      [20, 8],\r\n      [8, 9],\r\n      [9, 10],\r\n      [10, 11],\r\n      [11, 23],\r\n      [10, 24],\r\n      // Left leg\r\n      [0, 12],\r\n      [12, 13],\r\n      [13, 14],\r\n      [14, 15],\r\n      // Right leg\r\n      [0, 16],\r\n      [16, 17],\r\n      [17, 18],\r\n      [18, 19],\r\n    ];\r\n\r\n    // Draw lines for connections\r\n    connections.forEach(([i, j]) => {\r\n      if (joints[i] && joints[j]) {\r\n        // Check if we have depthX/depthY coordinates\r\n        if (\r\n          'depthX' in joints[i] &&\r\n          'depthY' in joints[i] &&\r\n          'depthX' in joints[j] &&\r\n          'depthY' in joints[j]\r\n        ) {\r\n          p5.line(\r\n            joints[i].depthX * p5.width,\r\n            joints[i].depthY * p5.height,\r\n            joints[j].depthX * p5.width,\r\n            joints[j].depthY * p5.height,\r\n          );\r\n        } else if (\r\n          'cameraX' in joints[i] &&\r\n          'cameraY' in joints[i] &&\r\n          'cameraX' in joints[j] &&\r\n          'cameraY' in joints[j]\r\n        ) {\r\n          // Fallback to camera coordinates\r\n          const scaleFactor = 0.5; // Adjust this value as needed\r\n          const centerX = p5.width / 2;\r\n          const centerY = p5.height / 2;\r\n\r\n          const x1 = centerX + joints[i].cameraX * scaleFactor;\r\n          const y1 = centerY + joints[i].cameraY * scaleFactor;\r\n          const x2 = centerX + joints[j].cameraX * scaleFactor;\r\n          const y2 = centerY + joints[j].cameraY * scaleFactor;\r\n\r\n          p5.line(x1, y1, x2, y2);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Draw a simplified skeleton (just dots for joints)\r\n   * @private\r\n   * @param {Object} body - Body data with skeleton information\r\n   * @param {p5.Color} color - Color to use for this skeleton\r\n   */\r\n  _drawSimpleSkeleton(body, color) {\r\n    if (!body.skeleton || !body.skeleton.joints) {\r\n      console.error('No skeleton joints in body data');\r\n      return;\r\n    }\r\n\r\n    const p5 = this.p5Instance;\r\n    const joints = body.skeleton.joints;\r\n\r\n    console.error(\r\n      'Drawing simple skeleton with',\r\n      joints.length,\r\n      'joints',\r\n    );\r\n\r\n    // Draw joints as large dots\r\n    p5.fill(color);\r\n    p5.noStroke();\r\n\r\n    joints.forEach((joint, index) => {\r\n      try {\r\n        let x, y;\r\n\r\n        // Try different coordinate systems\r\n        if ('depthX' in joint && 'depthY' in joint) {\r\n          // Use depth coordinates (normalized 0-1)\r\n          x = joint.depthX * p5.width;\r\n          y = joint.depthY * p5.height;\r\n          console.error(`Joint ${index} using depthX/Y: ${x}, ${y}`);\r\n        } else if ('cameraX' in joint && 'cameraY' in joint) {\r\n          // Use camera coordinates with simple scaling\r\n          const scaleFactor = 0.001; // Very small factor for camera coordinates (in mm)\r\n          const centerX = p5.width / 2;\r\n          const centerY = p5.height / 2;\r\n\r\n          x = centerX + joint.cameraX * scaleFactor;\r\n          y = centerY + joint.cameraY * scaleFactor;\r\n          console.error(`Joint ${index} using cameraX/Y: ${x}, ${y}`);\r\n        } else if ('colorX' in joint && 'colorY' in joint) {\r\n          // Use color coordinates (normalized 0-1)\r\n          x = joint.colorX * p5.width;\r\n          y = joint.colorY * p5.height;\r\n          console.error(`Joint ${index} using colorX/Y: ${x}, ${y}`);\r\n        } else {\r\n          // Skip this joint if no usable coordinates\r\n          console.error(`Joint ${index} has no usable coordinates`);\r\n          return;\r\n        }\r\n\r\n        // Draw a large dot for the joint\r\n        p5.ellipse(x, y, 20, 20);\r\n\r\n        // Draw joint index as text\r\n        p5.fill(255); // White text\r\n        p5.textSize(12);\r\n        p5.text(index.toString(), x, y);\r\n\r\n        // Reset fill color for next joint\r\n        p5.fill(color);\r\n      } catch (error) {\r\n        console.error(`Error drawing joint ${index}:`, error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set active state\r\n   * @param {boolean} active - Whether the visualizer is active\r\n   */\r\n  setActive(active) {\r\n    this.isActive = active;\r\n    if (!active) {\r\n      this.frameCount = 0;\r\n    }\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"index.a93068ff.js.map","sourceRoot":"/__parcel_source_root/"}