{"mappings":"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","sources":["examples/streamTest/js/visualizers/p5Visualizer.js"],"sourcesContent":["/**\r\n * P5Visualizer\r\n * Handles p5.js visualization for color and depth streams\r\n */\r\nclass P5Visualizer {\r\n  constructor() {\r\n    // p5.js canvas and instance\r\n    this.canvas = null;\r\n    this.p5Instance = null;\r\n\r\n    // Visualization state\r\n    this.isActive = false;\r\n    this.frameCount = 0;\r\n\r\n    // Constants\r\n    this.AZURE_COLOR_WIDTH = 1280;\r\n    this.AZURE_COLOR_HEIGHT = 720;\r\n    this.AZURE_DEPTH_WIDTH = 640;\r\n    this.AZURE_DEPTH_HEIGHT = 576;\r\n    this.DISPLAY_SCALE = 0.5;\r\n  }\r\n\r\n  /**\r\n   * Initialize the visualizer\r\n   * @returns {P5Visualizer} - The initialized visualizer instance\r\n   */\r\n  static initialize() {\r\n    const visualizer = new P5Visualizer();\r\n    visualizer._setupP5();\r\n    return visualizer;\r\n  }\r\n\r\n  /**\r\n   * Set up p5.js canvas and sketch\r\n   * @private\r\n   */\r\n  _setupP5() {\r\n    // Define p5.js sketch\r\n    const sketch = (p) => {\r\n      // Store the p5 instance\r\n      this.p5Instance = p;\r\n\r\n      p.setup = () => {\r\n        // Create canvas\r\n        this.canvas = p.createCanvas(\r\n          this.AZURE_COLOR_WIDTH * this.DISPLAY_SCALE,\r\n          this.AZURE_COLOR_HEIGHT * this.DISPLAY_SCALE,\r\n        );\r\n        this.canvas.parent('canvas-container');\r\n        p.pixelDensity(1);\r\n        p.background(255);\r\n      };\r\n\r\n      p.draw = () => {\r\n        // Draw frame count in corner if stream is active\r\n        if (this.isActive) {\r\n          p.fill(0);\r\n          p.textSize(14);\r\n          p.text(`Frames: ${this.frameCount}`, 10, 20);\r\n        }\r\n      };\r\n    };\r\n\r\n    // Create new p5 instance\r\n    new p5(sketch);\r\n  }\r\n\r\n  /**\r\n   * Resize canvas\r\n   * @param {number} width - Canvas width\r\n   * @param {number} height - Canvas height\r\n   */\r\n  resizeCanvas(width, height) {\r\n    if (this.p5Instance) {\r\n      this.p5Instance.resizeCanvas(width, height);\r\n      this.p5Instance.background(255);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear canvas\r\n   */\r\n  clearCanvas() {\r\n    if (this.p5Instance) {\r\n      this.p5Instance.background(255);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display color frame\r\n   * @param {Object} frame - Color frame data\r\n   */\r\n  displayColorFrame(frame) {\r\n    if (this.p5Instance && frame.src) {\r\n      this.p5Instance.loadImage(frame.src, (loadedImage) => {\r\n        // Clear canvas\r\n        this.p5Instance.background(255);\r\n        // Draw the image\r\n        this.p5Instance.image(\r\n          loadedImage,\r\n          0,\r\n          0,\r\n          this.p5Instance.width,\r\n          this.p5Instance.height,\r\n        );\r\n\r\n        // Update frame count\r\n        this.frameCount++;\r\n\r\n        // Set active state\r\n        this.setActive(true);\r\n\r\n        if (window.DEBUG && window.DEBUG.RAW_DEPTH) {\r\n          console.log(\r\n            `Color image drawn: ${loadedImage.width}x${loadedImage.height}`,\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      console.warn(\r\n        'Cannot display color frame: p5 instance or frame source not available',\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display depth frame\r\n   * @param {Object} frame - Depth frame data\r\n   */\r\n  displayDepthFrame(frame) {\r\n    if (this.p5Instance && frame.src) {\r\n      this.p5Instance.loadImage(\r\n        frame.src,\r\n        (loadedImage) => {\r\n          // Clear canvas\r\n          this.p5Instance.background(255);\r\n          // Draw the image\r\n          this.p5Instance.image(\r\n            loadedImage,\r\n            0,\r\n            0,\r\n            this.p5Instance.width,\r\n            this.p5Instance.height,\r\n          );\r\n\r\n          // Update frame count\r\n          this.frameCount++;\r\n\r\n          // Set active state\r\n          this.setActive(true);\r\n\r\n          if (window.DEBUG && window.DEBUG.RAW_DEPTH) {\r\n            console.log(\r\n              `Depth image drawn: ${loadedImage.width}x${loadedImage.height}`,\r\n            );\r\n          }\r\n        },\r\n        (err) => {\r\n          console.error(`Error loading depth image: ${err}`);\r\n        },\r\n      );\r\n    } else {\r\n      console.warn(\r\n        'Cannot display depth frame: p5 instance or frame source not available',\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display skeleton frame\r\n   * @param {Object} frame - Skeleton frame data with bodies array\r\n   */\r\n  displaySkeletonFrame(frame) {\r\n    if (!this.p5Instance) {\r\n      console.warn(\r\n        'Cannot display skeleton: p5 instance not available',\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Clear canvas\r\n    this.p5Instance.background(255);\r\n\r\n    // Draw skeletons if bodies exist\r\n    if (frame.bodies && frame.bodies.length > 0) {\r\n      // Colors for different bodies\r\n      const colors = [\r\n        this.p5Instance.color(255, 0, 0), // Red\r\n        this.p5Instance.color(0, 255, 0), // Green\r\n        this.p5Instance.color(0, 0, 255), // Blue\r\n        this.p5Instance.color(255, 255, 0), // Yellow\r\n        this.p5Instance.color(0, 255, 255), // Cyan\r\n        this.p5Instance.color(255, 0, 255), // Magenta\r\n      ];\r\n\r\n      // Draw each body\r\n      frame.bodies.forEach((body, index) => {\r\n        const color = colors[index % colors.length];\r\n        this._drawSkeleton(body, color);\r\n      });\r\n\r\n      // Update frame count\r\n      this.frameCount++;\r\n\r\n      // Set active state\r\n      this.setActive(true);\r\n\r\n      if (window.DEBUG && window.DEBUG.DATA) {\r\n        console.log(`Skeleton drawn: ${frame.bodies.length} bodies`);\r\n      }\r\n    } else {\r\n      console.warn('No bodies in skeleton frame');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw a single skeleton\r\n   * @private\r\n   * @param {Object} body - Body data with skeleton information\r\n   * @param {p5.Color} color - Color to use for this skeleton\r\n   */\r\n  _drawSkeleton(body, color) {\r\n    if (!body.skeleton || !body.skeleton.joints) {\r\n      console.warn('No skeleton joints in body data');\r\n      return;\r\n    }\r\n\r\n    const p5 = this.p5Instance;\r\n    const joints = body.skeleton.joints;\r\n\r\n    // Draw joints\r\n    p5.fill(color);\r\n    p5.noStroke();\r\n\r\n    joints.forEach((joint) => {\r\n      // Scale joint coordinates to canvas size\r\n      const x = joint.depthX * p5.width;\r\n      const y = joint.depthY * p5.height;\r\n\r\n      // Draw joint\r\n      p5.ellipse(x, y, 10, 10);\r\n    });\r\n\r\n    // Draw connections between joints (bone structure)\r\n    p5.stroke(color);\r\n    p5.strokeWeight(3);\r\n\r\n    // Define connections (pairs of joint indices)\r\n    const connections = [\r\n      // Torso\r\n      [0, 1],\r\n      [1, 20],\r\n      [20, 2],\r\n      [2, 3],\r\n      // Left arm\r\n      [20, 4],\r\n      [4, 5],\r\n      [5, 6],\r\n      [6, 7],\r\n      [7, 21],\r\n      [6, 22],\r\n      // Right arm\r\n      [20, 8],\r\n      [8, 9],\r\n      [9, 10],\r\n      [10, 11],\r\n      [11, 23],\r\n      [10, 24],\r\n      // Left leg\r\n      [0, 12],\r\n      [12, 13],\r\n      [13, 14],\r\n      [14, 15],\r\n      // Right leg\r\n      [0, 16],\r\n      [16, 17],\r\n      [17, 18],\r\n      [18, 19],\r\n    ];\r\n\r\n    // Draw lines for connections\r\n    connections.forEach(([i, j]) => {\r\n      if (joints[i] && joints[j]) {\r\n        p5.line(\r\n          joints[i].depthX * p5.width,\r\n          joints[i].depthY * p5.height,\r\n          joints[j].depthX * p5.width,\r\n          joints[j].depthY * p5.height,\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set active state\r\n   * @param {boolean} active - Whether the visualizer is active\r\n   */\r\n  setActive(active) {\r\n    this.isActive = active;\r\n    if (!active) {\r\n      this.frameCount = 0;\r\n    }\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"index.a93068ff.js.map","sourceRoot":"/__parcel_source_root/"}