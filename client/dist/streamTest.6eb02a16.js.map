{"mappings":"AAAA;;;CAGC,GACD,MAAM;IACJ,aAAc;QACZ,sBAAsB;QACtB,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,MAAM,GAAG,EAAE;QAEhB,2BAA2B;QAC3B,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW;QAEtD,uBAAuB;QACvB,IAAI,CAAC,YAAY,GAAG;IACtB;IAEA;;;GAGC,GACD,OAAO,aAAa;QAClB,MAAM,aAAa,IAAI;QACvB,OAAO;IACT;IAEA;;;GAGC,GACD,gBAAgB;QACd,OAAO,IAAI,CAAC,YAAY;IAC1B;IAEA;;GAEC,GACD,aAAa;QACX,kBAAkB;QAClB,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,aAAa,CAAC;YACtC,QAAQ,SAAS,cAAc,CAAC;YAChC,OAAO;YACP,WAAW;YACX,YAAY;QACd;QAEA,uCAAuC;QACvC,MAAM,YAAY,SAAS,cAAc,CAAC;QAC1C,IAAI,CAAC,QAAQ,CAAC,OAAO,CACnB,UAAU,WAAW,EACrB,UAAU,YAAY;QAGxB,uBAAuB;QACvB,OAAO,gBAAgB,CAAC,UAAU;YAChC,IAAI,CAAC,MAAM,CAAC,MAAM,GAChB,UAAU,WAAW,GAAG,UAAU,YAAY;YAChD,IAAI,CAAC,MAAM,CAAC,sBAAsB;YAClC,IAAI,CAAC,QAAQ,CAAC,OAAO,CACnB,UAAU,WAAW,EACrB,UAAU,YAAY;QAE1B;QAEA,yCAAyC;QACzC,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,iBAAiB,CACvC,IACA,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,GAC5B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,EACjC,GACA;QAGF,8DAA8D;QAC9D,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,MAAM;QAClC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,GAAG;QAEzB,uCAAuC;QACvC,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,iBAAiB,CACzC,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,QAAQ,CAAC,UAAU;QAE1B,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG;QAC5B,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG;QAC1B,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG;QACzB,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG;QACvB,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG;QACtB,IAAI,CAAC,QAAQ,CAAC,YAAY,GAAG;QAC7B,IAAI,CAAC,QAAQ,CAAC,oBAAoB,GAAG;QAErC,qCAAqC;QACrC,IAAI,CAAC,KAAK,GAAG,IAAI,MAAM,KAAK;QAC5B,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,IAAI,MAAM,KAAK,CAAC;QAExC,mBAAmB;QACnB,IAAI,CAAC,gBAAgB;QAErB,oBAAoB;QACpB,IAAI,CAAC,OAAO;QAEZ,sBAAsB;QACtB,IAAI,CAAC,YAAY,GAAG;IACtB;IAEA;;;GAGC,GACD,mBAAmB;QACjB,IAAI,CAAC,SAAS,GAAG,IAAI,MAAM,QAAQ;QAEnC,mBAAmB;QACnB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,WAAW,EAAE,IACpC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,UAAU,EAAE,IAAK;YACxC,kBAAkB;YAClB,MAAM,IAAI,IAAI,IAAI,CAAC,UAAU,GAAG;YAEhC,yBAAyB;YACzB,MAAM,OAAO,IAAI,IAAI,CAAC,UAAU,GAAG;YACnC,MAAM,OAAO,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,WAAW,GAAG;YAEvD,mDAAmD;YACnD,MAAM,SAAS,IAAI,MAAM,OAAO,CAAC,MAAM,MAAM;YAE7C,0BAA0B;YAC1B,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC;YAE7B,iDAAiD;YACjD,4CAA4C;YAC5C,MAAM,cAAc,IAAI,IAAI,CAAC,UAAU;YACvC,MAAM,cAAc,IAAI,IAAI,CAAC,WAAW;YACxC,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,IAAI,MAAM,KAAK,CAC9B,MAAM,cAAc,KACpB,MAAM,cAAc,KACpB;QAEJ;QAGF,kCAAkC;QAClC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM;QAEnC,iCAAiC;QACjC,IAAI,WAAW,IAAI,MAAM,cAAc,CAAC;YACtC,MAAM;YACN,cAAc,MAAM,YAAY;YAChC,iBAAiB;QACnB;QAEA,6BAA6B;QAC7B,IAAI,CAAC,IAAI,GAAG,IAAI,MAAM,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE;QAE7C,2BAA2B;QAC3B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI;IAC1B;IAEA;;;GAGC,GACD,iBAAiB,WAAW,EAAE;QAC5B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;QAErB,0BAA0B;QAC1B,MAAM,WAAW,KAAK,+BAA+B;QACrD,MAAM,WAAW;QAEjB,uBAAuB;QACvB,IAAI,cAAc,EAAE;QACpB,IAAI,MAAM,OAAO,SAAS;QAC1B,IAAI,MAAM;QACV,IAAI,eAAe;QACnB,IAAI,YAAY;QAEhB,iCAAiC;QACjC,IAAK,IAAI,IAAI,GAAG,IAAI,YAAY,MAAM,EAAE,IAAK;YAC3C,MAAM,QAAQ,WAAW,CAAC,EAAE;YAE5B,8CAA8C;YAC9C,IAAI,UAAU,GACZ;iBAEA;YAGF,IAAI,SAAS,YAAY,SAAS,UAAU;gBAC1C,YAAY,IAAI,CAAC;gBACjB,MAAM,KAAK,GAAG,CAAC,KAAK;gBACpB,MAAM,KAAK,GAAG,CAAC,KAAK;YACtB;QACF;QAEA,qDAAqD;QACrD,IAAI,YAAY,MAAM,GAAG,KAAK;YAC5B,MAAM;YACN,MAAM;QACR;QAEA,mEAAmE;QACnE,IACE,KAAK,MAAM,KAAK,QAChB,OAAO,KAAK,CAAC,SAAS,IACtB,OAAO,KAAK,CAAC,WAAW,EACxB;YACA,QAAQ,KAAK,CAAC;YACd,QAAQ,GAAG,CACT,CAAC,aAAa,EAAE,IAAI,IAAI,EAAE,IAAI,gBAAgB,EAAE,YAAY,MAAM,EAAE;YAEtE,QAAQ,GAAG,CACT,CAAC,aAAa,EAAE,UAAU,mBAAmB,EAAE,cAAc;YAG/D,+CAA+C;YAC/C,IAAI,YAAY,MAAM,GAAG,GAAG;gBAC1B,MAAM,aAAa,AAAC,CAAA,MAAM,GAAE,IAAK;gBACjC,MAAM,YAAY,MAAM,IAAI,IAAI,CAAC;gBAEjC,KAAK,MAAM,SAAS,YAAa;oBAC/B,MAAM,cAAc,KAAK,GAAG,CAC1B,GACA,KAAK,KAAK,CAAC,AAAC,CAAA,QAAQ,GAAE,IAAK;oBAE7B,SAAS,CAAC,YAAY;gBACxB;gBAEA,QAAQ,GAAG,CAAC,oBAAoB;gBAEhC,+BAA+B;gBAC/B,MAAM,aAAa,KAAK,GAAG,CAAC,IAAI,YAAY,MAAM;gBAClD,MAAM,eAAe,YAAY,KAAK,CAAC,GAAG;gBAC1C,QAAQ,GAAG,CAAC,wBAAwB;YACtC;YACA,QAAQ,QAAQ;QAClB;QAEA,wFAAwF;QACxF,sDAAsD;QACtD,MAAM,YAAY,KAAK,qCAAqC;QAE5D,gCAAgC;QAChC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,WAAW,EAAE,IACpC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,UAAU,EAAE,IAAK;YACxC,MAAM,IAAI,IAAI,IAAI,CAAC,UAAU,GAAG;YAChC,MAAM,QAAQ,WAAW,CAAC,EAAE;YAE5B,IAAI,QAAQ,YAAY,QAAQ,UAC9B,gDAAgD;YAChD,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,GAAG,QAAQ,6BAA6B;iBAC/D;gBACL,qDAAqD;gBACrD,sDAAsD;gBACtD,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,WAAW,kDAAkD;gBAErG,6DAA6D;gBAC7D,sDAAsD;gBACtD,MAAM,kBACJ,QAAQ,MAAM,AAAC,CAAA,QAAQ,GAAE,IAAM,CAAA,MAAM,GAAE,IAAK;gBAE9C,yCAAyC;gBACzC,kEAAkE;gBAClE,MAAM,MAAM,AAAC,CAAA,MAAM,eAAc,IAAK,KAAK,0BAA0B;gBACrE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,KAAK,KAAK;YACxC;QACF;QAGF,4CAA4C;QAC5C,IACE,KAAK,MAAM,KAAK,QAChB,OAAO,KAAK,CAAC,SAAS,IACtB,OAAO,KAAK,CAAC,IAAI,EACjB;YACA,wBAAwB;YACxB,8CAA8C;YAC9C,MAAM,eAAe,EAAE;YACvB,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK;gBAC1B,MAAM,MAAM,KAAK,KAAK,CACpB,KAAK,MAAM,KAAK,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM;gBAEhD,aAAa,IAAI,CAAC;oBAChB,OAAO;oBACP,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;oBACjC,eAAe,WAAW,CAAC,IAAI;gBACjC;YACF;YACA,QAAQ,GAAG,CAAC,2BAA2B;QACzC;QAEA,mBAAmB;QACnB,IAAI,CAAC,SAAS,CAAC,kBAAkB,GAAG;QACpC,IAAI,CAAC,SAAS,CAAC,gBAAgB,GAAG;IACpC;IAEA;;;GAGC,GACD,UAAU;QACR,mBAAmB;QACnB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM;QAE5C,gDAAgD;QAChD,IAAI,CAAC,QAAQ,CAAC,MAAM;QAEpB,qBAAqB;QACrB,sBAAsB,IAAM,IAAI,CAAC,OAAO;IAC1C;AACF","sources":["js/visualizers/threeVisualizer.js"],"sourcesContent":["/**\r\n * ThreeVisualizer\r\n * Handles Three.js point cloud visualization for raw depth data\r\n */\r\nclass ThreeVisualizer {\r\n  constructor() {\r\n    // Three.js components\r\n    this.renderer = null;\r\n    this.camera = null;\r\n    this.scene = null;\r\n    this.controls = null;\r\n    this.particles = null;\r\n    this.mesh = null;\r\n    this.colors = [];\r\n\r\n    // Constants for depth data\r\n    this.DEPTHWIDTH = 320;\r\n    this.DEPTHHEIGHT = 288;\r\n    this.numParticles = this.DEPTHWIDTH * this.DEPTHHEIGHT;\r\n\r\n    // Initialization state\r\n    this._initialized = false;\r\n  }\r\n\r\n  /**\r\n   * Initialize the visualizer\r\n   * @returns {ThreeVisualizer} - The initialized visualizer instance\r\n   */\r\n  static initialize() {\r\n    const visualizer = new ThreeVisualizer();\r\n    return visualizer;\r\n  }\r\n\r\n  /**\r\n   * Check if Three.js has been initialized\r\n   * @returns {boolean} - Whether Three.js has been initialized\r\n   */\r\n  isInitialized() {\r\n    return this._initialized;\r\n  }\r\n\r\n  /**\r\n   * Initialize Three.js components\r\n   */\r\n  initialize() {\r\n    // Create renderer\r\n    this.renderer = new THREE.WebGLRenderer({\r\n      canvas: document.getElementById('threeCanvas'),\r\n      alpha: 0,\r\n      antialias: true,\r\n      clearColor: 0x000000,\r\n    });\r\n\r\n    // Set renderer size to match container\r\n    const container = document.getElementById('three-container');\r\n    this.renderer.setSize(\r\n      container.clientWidth,\r\n      container.clientHeight,\r\n    );\r\n\r\n    // Handle window resize\r\n    window.addEventListener('resize', () => {\r\n      this.camera.aspect =\r\n        container.clientWidth / container.clientHeight;\r\n      this.camera.updateProjectionMatrix();\r\n      this.renderer.setSize(\r\n        container.clientWidth,\r\n        container.clientHeight,\r\n      );\r\n    });\r\n\r\n    // Create camera with wider field of view\r\n    this.camera = new THREE.PerspectiveCamera(\r\n      45, // Wider field of view\r\n      this.renderer.domElement.width /\r\n        this.renderer.domElement.height,\r\n      1,\r\n      10000,\r\n    );\r\n\r\n    // Position camera to view the point cloud from a better angle\r\n    this.camera.position.set(0, -100, 300);\r\n    this.camera.lookAt(0, 0, 0);\r\n\r\n    // Create controls with better defaults\r\n    this.controls = new THREE.TrackballControls(\r\n      this.camera,\r\n      this.renderer.domElement,\r\n    );\r\n    this.controls.rotateSpeed = 1.5;\r\n    this.controls.zoomSpeed = 1.2;\r\n    this.controls.panSpeed = 0.8;\r\n    this.controls.noZoom = false;\r\n    this.controls.noPan = false;\r\n    this.controls.staticMoving = true;\r\n    this.controls.dynamicDampingFactor = 0.3;\r\n\r\n    // Create scene with black background\r\n    this.scene = new THREE.Scene();\r\n    this.scene.background = new THREE.Color(0x000000);\r\n\r\n    // Create particles\r\n    this._createParticles();\r\n\r\n    // Begin render loop\r\n    this._render();\r\n\r\n    // Mark as initialized\r\n    this._initialized = true;\r\n  }\r\n\r\n  /**\r\n   * Create particles for depth feed\r\n   * @private\r\n   */\r\n  _createParticles() {\r\n    this.particles = new THREE.Geometry();\r\n\r\n    // Create particles\r\n    for (let y = 0; y < this.DEPTHHEIGHT; y++) {\r\n      for (let x = 0; x < this.DEPTHWIDTH; x++) {\r\n        // Calculate index\r\n        const i = y * this.DEPTHWIDTH + x;\r\n\r\n        // Center the point cloud\r\n        const xPos = x - this.DEPTHWIDTH * 0.5;\r\n        const yPos = this.DEPTHHEIGHT - y - this.DEPTHHEIGHT * 0.5;\r\n\r\n        // Create a new three point vector with initial z=0\r\n        const vertex = new THREE.Vector3(xPos, yPos, 0);\r\n\r\n        // Add it to the particles\r\n        this.particles.vertices.push(vertex);\r\n\r\n        // Assign each particle a color based on position\r\n        // This creates a gradient based on position\r\n        const normalizedX = x / this.DEPTHWIDTH;\r\n        const normalizedY = y / this.DEPTHHEIGHT;\r\n        this.colors[i] = new THREE.Color(\r\n          0.5 + normalizedX * 0.5, // R\r\n          0.5 + normalizedY * 0.5, // G\r\n          0.5, // B\r\n        );\r\n      }\r\n    }\r\n\r\n    // Give the particles their colors\r\n    this.particles.colors = this.colors;\r\n\r\n    // Create material for the points\r\n    let material = new THREE.PointsMaterial({\r\n      size: 2, // Smaller point size for better detail\r\n      vertexColors: THREE.VertexColors,\r\n      sizeAttenuation: true, // Points get smaller with distance\r\n    });\r\n\r\n    // Create the points geometry\r\n    this.mesh = new THREE.Points(this.particles, material);\r\n\r\n    // Add point cloud to scene\r\n    this.scene.add(this.mesh);\r\n  }\r\n\r\n  /**\r\n   * Update point cloud with depth data\r\n   * @param {Uint16Array} depthValues - Raw depth values\r\n   */\r\n  updatePointCloud(depthValues) {\r\n    if (!this.particles) return;\r\n\r\n    // Set desired depth range\r\n    const minDepth = 100; // Ignore values too close to 0\r\n    const maxDepth = 6000;\r\n\r\n    // Analyze depth values\r\n    let validValues = [];\r\n    let min = Number.MAX_VALUE;\r\n    let max = 0;\r\n    let nonZeroCount = 0;\r\n    let zeroCount = 0;\r\n\r\n    // First pass: collect statistics\r\n    for (let i = 0; i < depthValues.length; i++) {\r\n      const depth = depthValues[i];\r\n\r\n      // Count zero vs non-zero values for debugging\r\n      if (depth === 0) {\r\n        zeroCount++;\r\n      } else {\r\n        nonZeroCount++;\r\n      }\r\n\r\n      if (depth >= minDepth && depth <= maxDepth) {\r\n        validValues.push(depth);\r\n        min = Math.min(min, depth);\r\n        max = Math.max(max, depth);\r\n      }\r\n    }\r\n\r\n    // If we don't have enough valid values, use defaults\r\n    if (validValues.length < 100) {\r\n      min = minDepth;\r\n      max = maxDepth;\r\n    }\r\n\r\n    // Log statistics (only occasionally to avoid flooding the console)\r\n    if (\r\n      Math.random() < 0.05 &&\r\n      window.DEBUG.RAW_DEPTH &&\r\n      window.DEBUG.PERFORMANCE\r\n    ) {\r\n      console.group('Raw Depth Statistics');\r\n      console.log(\r\n        `Depth range: ${min} to ${max}, valid values: ${validValues.length}`,\r\n      );\r\n      console.log(\r\n        `Zero values: ${zeroCount}, Non-zero values: ${nonZeroCount}`,\r\n      );\r\n\r\n      // Log a histogram of depth values (10 buckets)\r\n      if (validValues.length > 0) {\r\n        const bucketSize = (max - min) / 10;\r\n        const histogram = Array(10).fill(0);\r\n\r\n        for (const depth of validValues) {\r\n          const bucketIndex = Math.min(\r\n            9,\r\n            Math.floor((depth - min) / bucketSize),\r\n          );\r\n          histogram[bucketIndex]++;\r\n        }\r\n\r\n        console.log('Depth histogram:', histogram);\r\n\r\n        // Log some sample depth values\r\n        const sampleSize = Math.min(20, validValues.length);\r\n        const sampleValues = validValues.slice(0, sampleSize);\r\n        console.log('Sample depth values:', sampleValues);\r\n      }\r\n      console.groupEnd();\r\n    }\r\n\r\n    // Camera view scale factor - adjust this to change the overall scale of the point cloud\r\n    // This doesn't affect precision, just the visual size\r\n    const viewScale = 0.1; // Reduced to make depth more visible\r\n\r\n    // Second pass: update particles\r\n    for (let y = 0; y < this.DEPTHHEIGHT; y++) {\r\n      for (let x = 0; x < this.DEPTHWIDTH; x++) {\r\n        const i = y * this.DEPTHWIDTH + x;\r\n        const depth = depthValues[i];\r\n\r\n        if (depth < minDepth || depth > maxDepth) {\r\n          // Push the particle far away so we don't see it\r\n          this.particles.vertices[i].z = -10000; // Use negative value to hide\r\n        } else {\r\n          // Use the raw depth value directly with view scaling\r\n          // This preserves the full precision of the depth data\r\n          this.particles.vertices[i].z = -depth * viewScale; // Negative to make closer objects appear in front\r\n\r\n          // Update color based on depth using a more detailed gradient\r\n          // Use the local min/max for better color distribution\r\n          const normalizedDepth =\r\n            max !== min ? (depth - min) / (max - min) : 0.5;\r\n\r\n          // Use a more sophisticated color mapping\r\n          // This creates a rainbow gradient from red (near) to violet (far)\r\n          const hue = (1.0 - normalizedDepth) * 270; // 0 (red) to 270 (violet)\r\n          this.colors[i].setHSL(hue / 360, 1.0, 0.5);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Log some debug info about the point cloud\r\n    if (\r\n      Math.random() < 0.01 &&\r\n      window.DEBUG.RAW_DEPTH &&\r\n      window.DEBUG.DATA\r\n    ) {\r\n      // Only log occasionally\r\n      // Sample a few points to check their z values\r\n      const samplePoints = [];\r\n      for (let i = 0; i < 5; i++) {\r\n        const idx = Math.floor(\r\n          Math.random() * this.particles.vertices.length,\r\n        );\r\n        samplePoints.push({\r\n          index: idx,\r\n          z: this.particles.vertices[idx].z,\r\n          originalDepth: depthValues[idx],\r\n        });\r\n      }\r\n      console.log('Sample points z-values:', samplePoints);\r\n    }\r\n\r\n    // Update particles\r\n    this.particles.verticesNeedUpdate = true;\r\n    this.particles.colorsNeedUpdate = true;\r\n  }\r\n\r\n  /**\r\n   * Render three.js scene\r\n   * @private\r\n   */\r\n  _render() {\r\n    // Render the scene\r\n    this.renderer.render(this.scene, this.camera);\r\n\r\n    // Update the trackball controls with each scene\r\n    this.controls.update();\r\n\r\n    // Request anim frame\r\n    requestAnimationFrame(() => this._render());\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"streamTest.6eb02a16.js.map","sourceRoot":"/__parcel_source_root/"}