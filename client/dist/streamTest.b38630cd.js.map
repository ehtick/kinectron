{"mappings":"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","sources":["js/controllers/visualizationController.js"],"sourcesContent":["/**\r\n * VisualizationController\r\n * Manages visualization strategies for different stream types\r\n */\r\nclass VisualizationController {\r\n  constructor() {\r\n    // Cache DOM elements\r\n    this.elements = {\r\n      canvasContainer: document.getElementById('canvas-container'),\r\n      threeContainer: document.getElementById('three-container'),\r\n    };\r\n\r\n    // Visualization state\r\n    this.p5Canvas = null;\r\n    this.threeVisualizer = null;\r\n\r\n    // Initialize visualizers\r\n    this._initializeVisualizers();\r\n  }\r\n\r\n  /**\r\n   * Initialize the controller\r\n   * @returns {VisualizationController} - The initialized controller instance\r\n   */\r\n  static initialize() {\r\n    const controller = new VisualizationController();\r\n    return controller;\r\n  }\r\n\r\n  /**\r\n   * Initialize visualizers\r\n   * @private\r\n   */\r\n  _initializeVisualizers() {\r\n    // Initialize Three.js visualizer\r\n    this.threeVisualizer = ThreeVisualizer.initialize();\r\n\r\n    // Initialize P5 visualizer\r\n    this.p5Visualizer = P5Visualizer.initialize();\r\n\r\n    // Show p5 canvas by default\r\n    this.showP5Canvas();\r\n  }\r\n\r\n  /**\r\n   * Show p5 canvas and hide Three.js canvas\r\n   */\r\n  showP5Canvas() {\r\n    if (this.elements.canvasContainer) {\r\n      this.elements.canvasContainer.style.display = 'block';\r\n    }\r\n\r\n    if (this.elements.threeContainer) {\r\n      this.elements.threeContainer.style.display = 'none';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show Three.js canvas and hide p5 canvas\r\n   */\r\n  showThreeCanvas() {\r\n    if (this.elements.canvasContainer) {\r\n      this.elements.canvasContainer.style.display = 'none';\r\n    }\r\n\r\n    if (this.elements.threeContainer) {\r\n      this.elements.threeContainer.style.display = 'block';\r\n    }\r\n\r\n    // Initialize Three.js if not already initialized\r\n    if (!this.threeVisualizer.isInitialized()) {\r\n      this.threeVisualizer.initialize();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resize p5 canvas\r\n   * @param {number} width - Canvas width\r\n   * @param {number} height - Canvas height\r\n   */\r\n  resizeP5Canvas(width, height) {\r\n    if (window.resizeCanvas) {\r\n      window.resizeCanvas(width, height);\r\n      window.background(255);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear p5 canvas\r\n   */\r\n  clearP5Canvas() {\r\n    if (window.background) {\r\n      window.background(255);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display color frame on p5 canvas\r\n   * @param {Object} frame - Color frame data\r\n   */\r\n  displayColorFrame(frame) {\r\n    if (window.loadImage) {\r\n      window.loadImage(frame.src, (loadedImage) => {\r\n        // Clear canvas\r\n        window.background(255);\r\n        // Draw the image\r\n        window.image(loadedImage, 0, 0, window.width, window.height);\r\n\r\n        if (window.DEBUG.RAW_DEPTH) {\r\n          console.log(\r\n            `Color image drawn: ${loadedImage.width}x${loadedImage.height}`,\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display depth frame on p5 canvas\r\n   * @param {Object} frame - Depth frame data\r\n   */\r\n  displayDepthFrame(frame) {\r\n    if (window.loadImage && frame.src) {\r\n      window.loadImage(\r\n        frame.src,\r\n        (loadedImage) => {\r\n          // Clear canvas\r\n          window.background(255);\r\n          // Draw the image\r\n          window.image(\r\n            loadedImage,\r\n            0,\r\n            0,\r\n            window.width,\r\n            window.height,\r\n          );\r\n\r\n          if (window.DEBUG.RAW_DEPTH) {\r\n            console.log(\r\n              `Depth image drawn: ${loadedImage.width}x${loadedImage.height}`,\r\n            );\r\n          }\r\n        },\r\n        (err) => {\r\n          console.error(`Error loading depth image: ${err}`);\r\n        },\r\n      );\r\n    } else {\r\n      console.warn('No frame.src available to load depth image');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update point cloud with depth values\r\n   * @param {Uint16Array} depthValues - Raw depth values\r\n   */\r\n  updatePointCloud(depthValues) {\r\n    if (this.threeVisualizer) {\r\n      this.threeVisualizer.updatePointCloud(depthValues);\r\n    }\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"streamTest.b38630cd.js.map","sourceRoot":"/__parcel_source_root/"}