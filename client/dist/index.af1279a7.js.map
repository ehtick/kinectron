{"mappings":"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","sources":["examples/streamTest/js/controllers/metricsController.js"],"sourcesContent":["/**\r\n * MetricsController\r\n * Handles performance metrics, frame rates, and statistics\r\n */\r\nclass MetricsController {\r\n  constructor() {\r\n    // Metrics state\r\n    this.frameCount = 0;\r\n    this.lastFrameTime = 0;\r\n    this.frameRates = [];\r\n    this.lastFrameTimestamp = 0;\r\n    this.frameLatencies = [];\r\n    this.isStreamActive = false;\r\n\r\n    // Bind methods to maintain 'this' context\r\n    this.resetMetrics = this.resetMetrics.bind(this);\r\n    this.updateFrameMetrics = this.updateFrameMetrics.bind(this);\r\n    this.calculateMetrics = this.calculateMetrics.bind(this);\r\n    this.getAverageFrameRate = this.getAverageFrameRate.bind(this);\r\n    this.getAverageLatency = this.getAverageLatency.bind(this);\r\n\r\n    // Start metrics calculation interval\r\n    this.metricsInterval = setInterval(this.calculateMetrics, 1000);\r\n  }\r\n\r\n  /**\r\n   * Initialize the controller\r\n   * @returns {MetricsController} - The initialized controller instance\r\n   */\r\n  static initialize() {\r\n    const controller = new MetricsController();\r\n    return controller;\r\n  }\r\n\r\n  /**\r\n   * Reset all metrics\r\n   */\r\n  resetMetrics() {\r\n    this.frameCount = 0;\r\n    this.lastFrameTime = Date.now();\r\n    this.frameRates = [];\r\n    this.frameLatencies = [];\r\n    this.isStreamActive = true;\r\n  }\r\n\r\n  /**\r\n   * Update metrics based on a new frame\r\n   * @param {Object} frame - The frame data\r\n   */\r\n  updateFrameMetrics(frame) {\r\n    // Update frame count\r\n    this.frameCount++;\r\n    const now = Date.now();\r\n\r\n    // Calculate frame rate every second\r\n    if (now - this.lastFrameTime >= 1000) {\r\n      const fps =\r\n        this.frameCount / ((now - this.lastFrameTime) / 1000);\r\n      this.frameRates.push(fps);\r\n      if (this.frameRates.length > 10) this.frameRates.shift(); // Keep last 10 readings\r\n      this.frameCount = 0;\r\n      this.lastFrameTime = now;\r\n    }\r\n\r\n    // Calculate frame latency\r\n    if (frame.timestamp) {\r\n      const latency = now - frame.timestamp;\r\n      this.frameLatencies.push(latency);\r\n\r\n      if (window.DEBUG.RAW_DEPTH && window.DEBUG.PERFORMANCE) {\r\n        console.log(`Frame latency: ${latency}ms`);\r\n      }\r\n    }\r\n\r\n    // Track last frame timestamp for jitter calculation\r\n    this.lastFrameTimestamp = now;\r\n  }\r\n\r\n  /**\r\n   * Calculate metrics (called on interval)\r\n   */\r\n  calculateMetrics() {\r\n    if (!this.isStreamActive) return;\r\n\r\n    // Update UI with frame rate\r\n    const p5FrameRate = window.frameRate\r\n      ? window.frameRate().toFixed(0)\r\n      : 0;\r\n    const actualFrameRate = this.getAverageFrameRate().toFixed(1);\r\n\r\n    // Update frame rate display\r\n    const frameRateElement = document.getElementById('frameRate');\r\n    if (frameRateElement) {\r\n      frameRateElement.textContent = `Frame Rate: ${p5FrameRate} fps (p5.js) / ${actualFrameRate} fps (actual)`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the average frame rate\r\n   * @returns {number} - The average frame rate\r\n   */\r\n  getAverageFrameRate() {\r\n    if (this.frameRates.length === 0) return 0;\r\n    return (\r\n      this.frameRates.reduce((a, b) => a + b, 0) /\r\n      this.frameRates.length\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the average latency\r\n   * @returns {string} - The average latency in milliseconds\r\n   */\r\n  getAverageLatency() {\r\n    if (this.frameLatencies.length === 0) return '0';\r\n    const avgLatency =\r\n      this.frameLatencies.reduce((a, b) => a + b, 0) /\r\n      this.frameLatencies.length;\r\n    return avgLatency.toFixed(1);\r\n  }\r\n\r\n  /**\r\n   * Clean up resources when no longer needed\r\n   */\r\n  dispose() {\r\n    if (this.metricsInterval) {\r\n      clearInterval(this.metricsInterval);\r\n    }\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"index.af1279a7.js.map","sourceRoot":"/__parcel_source_root/"}