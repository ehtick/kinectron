{"mappings":"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","sources":["js/controllers/kinectController.js"],"sourcesContent":["/**\r\n * KinectController\r\n * Handles Kinectron initialization, connection, and stream management\r\n */\r\nclass KinectController {\r\n  constructor(dependencies) {\r\n    this.debug = dependencies.debug;\r\n    this.metrics = dependencies.metrics;\r\n    this.ui = dependencies.ui;\r\n    this.visualization = dependencies.visualization;\r\n\r\n    this.kinectron = null;\r\n    this.isStreamActive = false;\r\n    this.currentStreamType = null;\r\n\r\n    // Constants\r\n    this.AZURE_COLOR_WIDTH = 1280;\r\n    this.AZURE_COLOR_HEIGHT = 720;\r\n    this.AZURE_DEPTH_WIDTH = 640;\r\n    this.AZURE_DEPTH_HEIGHT = 576;\r\n    this.DISPLAY_SCALE = 0.5;\r\n\r\n    // Bind methods to maintain 'this' context\r\n    this.initKinect = this.initKinect.bind(this);\r\n    this.startColorStream = this.startColorStream.bind(this);\r\n    this.startDepthStream = this.startDepthStream.bind(this);\r\n    this.startRawDepthStream = this.startRawDepthStream.bind(this);\r\n    this.stopStream = this.stopStream.bind(this);\r\n\r\n    // Set up UI event handlers\r\n    this._setupUIEventHandlers();\r\n  }\r\n\r\n  /**\r\n   * Initialize the controller\r\n   * @param {Object} dependencies - Controller dependencies\r\n   * @returns {KinectController} - The initialized controller instance\r\n   */\r\n  static initialize(dependencies) {\r\n    const controller = new KinectController(dependencies);\r\n    return controller;\r\n  }\r\n\r\n  /**\r\n   * Set up UI event handlers\r\n   * @private\r\n   */\r\n  _setupUIEventHandlers() {\r\n    // Set up event handlers for UI elements\r\n    this.ui.setupEventHandlers({\r\n      initializeKinect: this.initKinect,\r\n      startColorStream: this.startColorStream,\r\n      startDepthStream: this.startDepthStream,\r\n      startRawDepthStream: this.startRawDepthStream,\r\n      stopStream: this.stopStream,\r\n      forceEnableButtons: () => this.ui.forceEnableButtons(),\r\n      clearDebugInfo: () => this.debug.clearDebugInfo(),\r\n      toggleDebug: (enabled) => this.debug.toggleDebug(enabled),\r\n      togglePerformanceDebug: (enabled) =>\r\n        this.debug.togglePerformanceDebug(enabled),\r\n      toggleDataDebug: (enabled) =>\r\n        this.debug.toggleDataDebug(enabled),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize Kinectron and connect to the server\r\n   */\r\n  async initKinect() {\r\n    this.ui.updateStreamStatus('Initializing Kinect...');\r\n    this.debug.addDebugInfo('Initializing Kinect...', true);\r\n\r\n    // Initialize Kinectron if not already initialized\r\n    if (!this.kinectron) {\r\n      this.kinectron = new Kinectron({\r\n        host: '127.0.0.1',\r\n        port: 9001,\r\n        path: '/',\r\n      });\r\n\r\n      // Set up Kinectron event handlers\r\n      this._setupKinectronEvents();\r\n\r\n      // Connect to server\r\n      this.kinectron.peer.connect();\r\n    }\r\n\r\n    try {\r\n      // Initialize Kinect on the server\r\n      this.debug.addDebugInfo('Calling kinectron.initKinect()', true);\r\n      const result = await this.kinectron.initKinect();\r\n\r\n      if (window.DEBUG.RAW_DEPTH) {\r\n        console.log('Kinect initialization result:', result);\r\n      }\r\n\r\n      // Check for success in the normalized result\r\n      if (result.success || result.alreadyInitialized) {\r\n        this.debug.addDebugInfo(\r\n          'Kinect initialized successfully - enabling buttons',\r\n          true,\r\n        );\r\n        this.ui.updateStreamStatus(\r\n          `Kinect ${\r\n            result.alreadyInitialized ? 'Already' : ''\r\n          } Initialized Successfully`,\r\n          true,\r\n        );\r\n        // Set Kinect as initialized and enable buttons\r\n        this.ui.setKinectInitialized(true);\r\n        this.ui.enableStreamButtons();\r\n      } else {\r\n        this.debug.addDebugInfo(\r\n          `Kinect initialization failed: ${\r\n            result.error || 'Unknown error'\r\n          }`,\r\n          true,\r\n        );\r\n        this.ui.updateStreamStatus(\r\n          `Kinect Initialization Failed: ${\r\n            result.error || 'Unknown error'\r\n          }`,\r\n          false,\r\n        );\r\n      }\r\n\r\n      // Try to force enable buttons if they're still disabled\r\n      if (this.ui.areButtonsDisabled()) {\r\n        this.debug.addDebugInfo(\r\n          'Buttons still disabled after update, forcing enable...',\r\n          true,\r\n        );\r\n        this.ui.forceEnableButtons();\r\n      }\r\n    } catch (error) {\r\n      this.debug.addDebugInfo(\r\n        `Error initializing Kinect: ${\r\n          error.message || 'Unknown error'\r\n        }`,\r\n        true,\r\n      );\r\n      this.ui.updateStreamStatus(\r\n        `Kinect Initialization Failed: ${\r\n          error.message || 'Unknown error'\r\n        }`,\r\n        false,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set up Kinectron event handlers\r\n   * @private\r\n   */\r\n  _setupKinectronEvents() {\r\n    // Connection status handling\r\n    this.kinectron.on('ready', () => {\r\n      this.ui.updateConnectionStatus('Connected', true);\r\n      this.debug.addDebugInfo('Peer connection ready', true);\r\n      // Note: We do NOT enable buttons here. Buttons should only be enabled after Kinect initialization.\r\n    });\r\n\r\n    this.kinectron.on('error', (error) => {\r\n      this.ui.updateConnectionStatus(\r\n        `Error - ${error.error || error.message}`,\r\n        false,\r\n      );\r\n      console.error('Connection error:', error);\r\n      this.debug.addDebugInfo(\r\n        `Connection error: ${error.error || error.message}`,\r\n        true,\r\n      );\r\n    });\r\n\r\n    // Direct event listener for kinectInitialized as a backup approach\r\n    this.kinectron.on('kinectInitialized', (data) => {\r\n      // Normalize the success value to handle nested structure\r\n      let isSuccess = false;\r\n      if (\r\n        data.success &&\r\n        typeof data.success === 'object' &&\r\n        data.success.success === true\r\n      ) {\r\n        isSuccess = true;\r\n      } else if (\r\n        typeof data.success === 'boolean' &&\r\n        data.success === true\r\n      ) {\r\n        isSuccess = true;\r\n      }\r\n\r\n      // Enable buttons if successful\r\n      if (isSuccess || data.alreadyInitialized) {\r\n        // Set Kinect as initialized and enable buttons\r\n        this.ui.setKinectInitialized(true);\r\n        this.ui.enableStreamButtons();\r\n        this.ui.updateStreamStatus(\r\n          'Kinect Initialized via Direct Event',\r\n          true,\r\n        );\r\n        this.debug.addDebugInfo(\r\n          'Kinect initialized successfully via direct event',\r\n          true,\r\n        );\r\n      } else {\r\n        this.debug.addDebugInfo(\r\n          `Kinect initialization had issues: ${\r\n            data.error || 'Unknown error'\r\n          }`,\r\n          true,\r\n        );\r\n      }\r\n    });\r\n\r\n    // Add a data event listener to capture all peer messages\r\n    this.kinectron.on('data', (data) => {\r\n      if (window.DEBUG.RAW_DEPTH) {\r\n        console.log('Raw data event received:', data);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start color stream\r\n   */\r\n  startColorStream() {\r\n    this.ui.updateStreamStatus('Stream Status: Starting...');\r\n    this.metrics.resetMetrics();\r\n    this.isStreamActive = true;\r\n    this.currentStreamType = 'color';\r\n\r\n    // Show p5 canvas and hide Three.js canvas\r\n    this.visualization.showP5Canvas();\r\n\r\n    // Resize canvas for color stream\r\n    this.visualization.resizeP5Canvas(\r\n      this.AZURE_COLOR_WIDTH * this.DISPLAY_SCALE,\r\n      this.AZURE_COLOR_HEIGHT * this.DISPLAY_SCALE,\r\n    );\r\n\r\n    this.kinectron.startColor((frame) => {\r\n      // Update stream status\r\n      this.ui.updateStreamStatus('Active (Color)', true);\r\n\r\n      // Update metrics\r\n      this.metrics.updateFrameMetrics(frame);\r\n\r\n      // Use p5.js loadImage to handle the frame data\r\n      this.visualization.displayColorFrame(frame);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start depth stream\r\n   */\r\n  startDepthStream() {\r\n    this.ui.updateStreamStatus('Stream Status: Starting...');\r\n    this.metrics.resetMetrics();\r\n    this.isStreamActive = true;\r\n    this.currentStreamType = 'depth';\r\n\r\n    // Show p5 canvas and hide Three.js canvas\r\n    this.visualization.showP5Canvas();\r\n\r\n    // Resize canvas for depth stream\r\n    this.visualization.resizeP5Canvas(\r\n      this.AZURE_DEPTH_WIDTH * this.DISPLAY_SCALE,\r\n      this.AZURE_DEPTH_HEIGHT * this.DISPLAY_SCALE,\r\n    );\r\n\r\n    this.debug.addDebugInfo('Starting depth stream...', true);\r\n    this.kinectron.startDepth((frame) => {\r\n      // Update stream status\r\n      this.ui.updateStreamStatus('Active (Depth)', true);\r\n\r\n      // Update metrics\r\n      this.metrics.updateFrameMetrics(frame);\r\n\r\n      // Display the depth frame\r\n      this.visualization.displayDepthFrame(frame);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start raw depth stream\r\n   */\r\n  startRawDepthStream() {\r\n    this.ui.updateStreamStatus('Stream Status: Starting...');\r\n    this.metrics.resetMetrics();\r\n    this.isStreamActive = true;\r\n    this.currentStreamType = 'rawDepth';\r\n\r\n    // Hide p5 canvas and show Three.js canvas\r\n    this.visualization.showThreeCanvas();\r\n\r\n    this.debug.addDebugInfo('Starting raw depth stream...', true);\r\n    this.kinectron.startRawDepth((frame) => {\r\n      // Update stream status\r\n      this.ui.updateStreamStatus('Active (Raw Depth)', true);\r\n\r\n      // Update metrics\r\n      this.metrics.updateFrameMetrics(frame);\r\n\r\n      // Update the point cloud with the depth values\r\n      if (frame.depthValues) {\r\n        this.visualization.updatePointCloud(frame.depthValues);\r\n\r\n        // Update resolution info\r\n        this.ui.updateResolution(\r\n          `${frame.width}x${frame.height} | Depth Values: ${\r\n            frame.depthValues.length\r\n          } | Avg Latency: ${this.metrics.getAverageLatency()}ms`,\r\n        );\r\n\r\n        if (window.DEBUG.RAW_DEPTH && window.DEBUG.DATA) {\r\n          this._logDepthStatistics(frame.depthValues);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Stop all streams\r\n   */\r\n  stopStream() {\r\n    if (this.kinectron) {\r\n      this.kinectron.stopAll();\r\n    }\r\n\r\n    this.ui.updateStreamStatus('Inactive');\r\n    this.ui.updateFrameRate('0 fps');\r\n    this.ui.updateResolution('-');\r\n    this.debug.addDebugInfo('Stream stopped', true);\r\n\r\n    // Show p5 canvas and hide Three.js canvas\r\n    this.visualization.showP5Canvas();\r\n    this.visualization.clearP5Canvas();\r\n\r\n    this.isStreamActive = false;\r\n    this.currentStreamType = null;\r\n  }\r\n\r\n  /**\r\n   * Log depth statistics for debugging\r\n   * @private\r\n   * @param {Uint16Array} depthValues - Raw depth values\r\n   */\r\n  _logDepthStatistics(depthValues) {\r\n    // Calculate min, max, and average depth for console logging\r\n    let validCount = 0;\r\n    let sum = 0;\r\n    let min = Number.MAX_VALUE;\r\n    let max = 0;\r\n\r\n    for (let i = 0; i < depthValues.length; i++) {\r\n      const depth = depthValues[i];\r\n      if (depth >= 100 && depth <= 3000) {\r\n        validCount++;\r\n        sum += depth;\r\n        min = Math.min(min, depth);\r\n        max = Math.max(max, depth);\r\n      }\r\n    }\r\n\r\n    const avg = validCount > 0 ? sum / validCount : 0;\r\n\r\n    console.group('Raw Depth Frame Data');\r\n    console.log(\r\n      `Depth values: ${depthValues.length} points, ${validCount} valid points`,\r\n    );\r\n    console.log(\r\n      `Depth range: min=${min}, max=${max}, avg=${avg.toFixed(2)}`,\r\n    );\r\n    console.groupEnd();\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"streamTest.21fe1ade.js.map","sourceRoot":"/__parcel_source_root/"}