{"mappings":"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","sources":["client/src/index.js","client/src/kinectron.js","client/src/peer/peerConnection.js","client/src/peer/peerConfig.js","client/src/peer/errors.js","client/src/peer/ngrokState.js","client/src/utils/debug.js","client/src/streams/streamHandlers.js","client/src/utils/imageProcessing.js"],"sourcesContent":["/**\r\n * @fileoverview Main entry point for the Kinectron client library\r\n * @version 1.0.0\r\n */\r\n\r\nimport { Kinectron } from './kinectron.js';\r\n\r\nconsole.log('You are running Kinectron API version 1.0.0');\r\n\r\n// Export the Kinectron class as the default export\r\nexport default Kinectron;\r\n","import { PeerConnection } from './peer/peerConnection.js';\r\nimport { NgrokClientState } from './peer/ngrokState.js';\r\nimport { DEBUG, log } from './utils/debug.js';\r\nimport {\r\n  createFrameHandler,\r\n  createRawDepthHandler,\r\n  createBodyHandler,\r\n  createMultiFrameHandler,\r\n} from './streams/streamHandlers.js';\r\n\r\nexport class Kinectron {\r\n  constructor(networkConfig) {\r\n    this.peer = new PeerConnection(networkConfig);\r\n    this.messageHandlers = new Map();\r\n    this.state = null;\r\n\r\n    // Set up event handlers\r\n    this.peer.on('ready', (data) => {\r\n      this.state = data.state;\r\n      const handler = this.messageHandlers.get('ready');\r\n      if (handler) handler(data);\r\n    });\r\n\r\n    this.peer.on('error', (error) => {\r\n      const handler = this.messageHandlers.get('error');\r\n      if (handler) handler(error);\r\n    });\r\n\r\n    // Handle state changes\r\n    this.peer.on('stateChange', (data) => {\r\n      this.state = data.to;\r\n      const handler = this.messageHandlers.get('stateChange');\r\n      if (handler) handler(data);\r\n    });\r\n\r\n    // Handle metrics updates\r\n    this.peer.on('metrics', (data) => {\r\n      const handler = this.messageHandlers.get('metrics');\r\n      if (handler) handler(data);\r\n    });\r\n\r\n    // Handle incoming data\r\n    this.peer.on('data', (data) => {\r\n      const { event, data: eventData } = data;\r\n      const handler = this.messageHandlers.get(event);\r\n\r\n      if (handler) {\r\n        // if (event === 'bodyFrame') debugger;\r\n\r\n        handler(eventData);\r\n      } else {\r\n        log.warn('Kinectron: No handler found for event:', event);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Event registration\r\n  on(event, callback) {\r\n    this.messageHandlers.set(event, callback);\r\n  }\r\n\r\n  // Get current state\r\n  getState() {\r\n    return this.peer.getState();\r\n  }\r\n\r\n  // Check if connected\r\n  isConnected() {\r\n    return this.state === NgrokClientState.STATES.CONNECTED;\r\n  }\r\n\r\n  // Set Kinect type (azure or windows)\r\n  setKinectType(kinectType) {\r\n    if (!this.isConnected()) {\r\n      log.warn('Cannot set Kinect type: not connected');\r\n      return;\r\n    }\r\n    this.send('setkinect', kinectType);\r\n  }\r\n\r\n  // Initialize Kinect\r\n  initKinect(callback) {\r\n    if (!this.isConnected()) {\r\n      log.warn('Cannot initialize Kinect: not connected');\r\n      return Promise.reject(\r\n        new Error('Cannot initialize Kinect: not connected'),\r\n      );\r\n    }\r\n\r\n    // Create a promise that resolves when we get the kinectInitialized event\r\n    const initPromise = new Promise((resolve, reject) => {\r\n      // Set up a one-time handler for the initialization response\r\n      const handler = (data) => {\r\n        // Normalize the success value to handle nested structure\r\n        let isSuccess = false;\r\n        if (\r\n          data.success &&\r\n          typeof data.success === 'object' &&\r\n          data.success.success === true\r\n        ) {\r\n          isSuccess = true;\r\n        } else if (\r\n          typeof data.success === 'boolean' &&\r\n          data.success === true\r\n        ) {\r\n          isSuccess = true;\r\n        }\r\n\r\n        // Create a normalized result object\r\n        const normalizedResult = {\r\n          success: isSuccess,\r\n          alreadyInitialized: !!data.alreadyInitialized,\r\n          error: data.error || null,\r\n          rawData: data, // Include the original data for debugging\r\n        };\r\n\r\n        if (isSuccess || data.alreadyInitialized) {\r\n          resolve(normalizedResult);\r\n        } else {\r\n          reject(\r\n            new Error(data.error || 'Failed to initialize Kinect'),\r\n          );\r\n        }\r\n\r\n        // Remove the handler after it's been called\r\n        this.messageHandlers.delete('kinectInitialized');\r\n      };\r\n\r\n      this.messageHandlers.set('kinectInitialized', handler);\r\n\r\n      // Send initialization request to server\r\n      this.send('initkinect', {});\r\n    });\r\n\r\n    // For backward compatibility, if a callback is provided, use it\r\n    if (callback) {\r\n      initPromise\r\n        .then((data) => callback(data))\r\n        .catch((error) =>\r\n          callback({ success: false, error: error.message }),\r\n        );\r\n    }\r\n\r\n    // Return the promise for modern Promise-based usage\r\n    return initPromise;\r\n  }\r\n\r\n  // Send data to peer\r\n  send(event, data) {\r\n    if (!this.isConnected()) {\r\n      log.warn('Cannot send data: not connected');\r\n      return;\r\n    }\r\n    this.peer.send(event, data);\r\n  }\r\n\r\n  // Start feed methods\r\n  startColor(callback) {\r\n    if (callback) {\r\n      // Set up frame handler to process color frames\r\n      this.messageHandlers.set(\r\n        'frame',\r\n        createFrameHandler('color', callback),\r\n      );\r\n    }\r\n    this.send('feed', { feed: 'color' });\r\n  }\r\n\r\n  startDepth(callback) {\r\n    if (callback) {\r\n      // Set up frame handler to process depth frames\r\n      this.messageHandlers.set(\r\n        'frame',\r\n        createFrameHandler('depth', callback),\r\n      );\r\n    }\r\n    this.send('feed', { feed: 'depth' });\r\n  }\r\n\r\n  /**\r\n   * Unpacks raw depth data from a WebP image\r\n   * @private\r\n   * @param {string} dataUrl - The data URL containing the depth data\r\n   * @param {number} width - The width of the image\r\n   * @param {number} height - The height of the image\r\n   * @param {number} originalWidth - The original width of the depth data (not used in new implementation)\r\n   * @param {Object} testValues - Test values to verify unpacking accuracy\r\n   * @returns {Promise<Uint16Array>} - Promise resolving to the unpacked depth values\r\n   */\r\n  _unpackRawDepthData(\r\n    dataUrl,\r\n    width,\r\n    height,\r\n    originalWidth,\r\n    testValues,\r\n  ) {\r\n    // Log using the imported debug module\r\n    if (DEBUG.DATA) {\r\n      log.data(\r\n        'Unpacking raw depth data with dimensions:',\r\n        width,\r\n        'x',\r\n        height,\r\n      );\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      // Create image to load the data URL\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        // Use OffscreenCanvas for efficient processing\r\n        const canvas = new OffscreenCanvas(width, height);\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        // Draw the image to the canvas\r\n        ctx.drawImage(img, 0, 0);\r\n\r\n        // Get the pixel data\r\n        const imageData = ctx.getImageData(0, 0, width, height).data;\r\n\r\n        // Create array for unpacked depth values\r\n        const depthValues = new Uint16Array(width * height);\r\n\r\n        // Process the raw depth data exactly like the app.js client code\r\n        let j = 0;\r\n        for (let i = 0; i < imageData.length; i += 4) {\r\n          // Extract depth value from R and G channels\r\n          const depth = (imageData[i + 1] << 8) | imageData[i]; // Get uint16 data from buffer\r\n          depthValues[j++] = depth;\r\n        }\r\n\r\n        // Verify test values if provided\r\n        if (testValues && DEBUG.DATA) {\r\n          const unpackedValue1000 = depthValues[1000];\r\n          const unpackedValue2000 = depthValues[2000];\r\n          const unpackedValue3000 = depthValues[3000];\r\n\r\n          log.data('Test values comparison:', {\r\n            'Index 1000': {\r\n              Original: testValues.index1000,\r\n              Unpacked: unpackedValue1000,\r\n              Difference: testValues.index1000 - unpackedValue1000,\r\n            },\r\n            'Index 2000': {\r\n              Original: testValues.index2000,\r\n              Unpacked: unpackedValue2000,\r\n              Difference: testValues.index2000 - unpackedValue2000,\r\n            },\r\n            'Index 3000': {\r\n              Original: testValues.index3000,\r\n              Unpacked: unpackedValue3000,\r\n              Difference: testValues.index3000 - unpackedValue3000,\r\n            },\r\n          });\r\n        }\r\n\r\n        resolve(depthValues);\r\n      };\r\n\r\n      img.onerror = (err) => {\r\n        reject(new Error('Failed to load depth image: ' + err));\r\n      };\r\n\r\n      img.src = dataUrl;\r\n    });\r\n  }\r\n\r\n  startRawDepth(callback) {\r\n    if (callback) {\r\n      // Set up handler to process raw depth frames\r\n      this.messageHandlers.set(\r\n        'rawDepth',\r\n        createRawDepthHandler(\r\n          callback,\r\n          this._unpackRawDepthData.bind(this),\r\n        ),\r\n      );\r\n    }\r\n    this.send('feed', { feed: 'raw-depth' });\r\n  }\r\n\r\n  startBodies(callback) {\r\n    if (callback) {\r\n      // Set up handler to process body tracking frames\r\n      this.messageHandlers.set(\r\n        'bodyFrame',\r\n        createBodyHandler(callback),\r\n      );\r\n    }\r\n    this.send('feed', { feed: 'body' });\r\n  }\r\n\r\n  startKey(callback) {\r\n    if (callback) {\r\n      // Set up frame handler to process key frames\r\n      this.messageHandlers.set(\r\n        'frame',\r\n        createFrameHandler('key', callback),\r\n      );\r\n    }\r\n    this.send('feed', { feed: 'key' });\r\n  }\r\n\r\n  startDepthKey(callback) {\r\n    if (callback) {\r\n      // Set up handler to process depth key frames\r\n      this.messageHandlers.set(\r\n        'depth-key', // Changed from 'depthKey' to match server's broadcast event name\r\n        createFrameHandler('depth-key', callback),\r\n      );\r\n    }\r\n    this.send('feed', { feed: 'depth-key' });\r\n  }\r\n\r\n  startRGBD(callback) {\r\n    if (callback) {\r\n      // Set up frame handler to process RGBD frames\r\n      this.messageHandlers.set(\r\n        'frame',\r\n        createFrameHandler('rgbd', callback),\r\n      );\r\n    }\r\n    this.send('feed', { feed: 'rgbd' });\r\n  }\r\n\r\n  startMultiFrame(frames, callback) {\r\n    if (callback) {\r\n      // Set up handler to process multi-frame data\r\n      this.messageHandlers.set(\r\n        'multiFrame',\r\n        createMultiFrameHandler(callback),\r\n      );\r\n    }\r\n    this.send('multi', frames);\r\n  }\r\n\r\n  // Stop all feeds\r\n  stopAll() {\r\n    this.send('feed', { feed: 'stop-all' });\r\n  }\r\n\r\n  // Clean up\r\n  close() {\r\n    this.peer.close();\r\n    this.messageHandlers.clear();\r\n    this.state = null;\r\n  }\r\n}\r\n","import Peer from 'peerjs';\r\nimport { DEFAULT_PEER_ID, processPeerConfig } from './peerConfig.js';\r\nimport { NgrokClientState, NgrokClientError } from './ngrokState.js';\r\nimport { DEBUG } from '../utils/debug.js';\r\n\r\n/**\r\n * @typedef {import('./peerConfig.js').PeerNetworkConfig} PeerNetworkConfig\r\n */\r\n\r\n/**\r\n * Enhanced peer-to-peer connection handler with improved reliability\r\n */\r\nexport class PeerConnection {\r\n  /**\r\n   * @param {string|PeerNetworkConfig} [networkConfig] - Network configuration or host address\r\n   * @param {string} [peerId] - ID of the peer to connect to\r\n   */\r\n  constructor(networkConfig, peerId) {\r\n    /** @private */\r\n    this.peer = null;\r\n    /** @private */\r\n    this.connection = null;\r\n    /** @private */\r\n    this.targetPeerId = peerId || DEFAULT_PEER_ID;\r\n    /** @private */\r\n    this.config = processPeerConfig(networkConfig);\r\n    /** @private */\r\n    this.messageHandlers = new Map();\r\n    /** @private */\r\n    this.messageQueue = [];\r\n    /** @private */\r\n    this.maxQueueSize = 100;\r\n    /** @private */\r\n    this.lastPingTime = 0;\r\n    /** @private */\r\n    this.pingInterval = null;\r\n    /** @private */\r\n    this.healthCheckInterval = null;\r\n    /** @private */\r\n    this.clientId = this.generateClientId();\r\n    /** @private */\r\n    this.state = new NgrokClientState();\r\n\r\n    // Forward state events to message handlers\r\n    this.state.on('stateChange', (data) => {\r\n      const handler = this.messageHandlers.get('stateChange');\r\n      if (handler) handler(data);\r\n    });\r\n\r\n    this.state.on('error', (data) => {\r\n      const handler = this.messageHandlers.get('error');\r\n      if (handler) handler(data);\r\n    });\r\n\r\n    this.state.on('metrics', (data) => {\r\n      const handler = this.messageHandlers.get('metrics');\r\n      if (handler) handler(data);\r\n    });\r\n\r\n    this.initialize();\r\n  }\r\n\r\n  /**\r\n   * Generate a consistent client ID\r\n   * @private\r\n   * @returns {string} Client ID\r\n   */\r\n  generateClientId() {\r\n    // Generate unique ID for each instance\r\n    const timestamp = Date.now().toString(36);\r\n    const random = Math.random().toString(36).substr(2, 5);\r\n    const prefix = this.config.host?.includes('ngrok')\r\n      ? 'ngrok'\r\n      : 'local';\r\n    const role = this.config.role || 'default';\r\n    return `${prefix}-${role}-${timestamp}-${random}`;\r\n  }\r\n\r\n  /**\r\n   * Get current connection state\r\n   * @returns {Object} Current state information\r\n   */\r\n  getState() {\r\n    return this.state.getMetadata();\r\n  }\r\n\r\n  /**\r\n   * Initialize the peer connection with enhanced reliability\r\n   * @private\r\n   */\r\n  initialize() {\r\n    try {\r\n      if (this.peer) {\r\n        console.warn('Peer already initialized');\r\n        return;\r\n      }\r\n\r\n      if (DEBUG.PEER) {\r\n        console.log('Initializing peer with config:', this.config);\r\n      }\r\n\r\n      // Check if this is an ngrok connection\r\n      const isNgrok =\r\n        typeof this.config.host === 'string' &&\r\n        this.config.host.includes('ngrok');\r\n\r\n      if (isNgrok) {\r\n        // Set state to validating for ngrok connections\r\n        this.state.setState(NgrokClientState.STATES.VALIDATING);\r\n\r\n        // Validate ngrok URL format\r\n        if (!this.config.host.includes('ngrok-free.app')) {\r\n          throw new NgrokClientError('Invalid ngrok URL format', {\r\n            url: this.config.host,\r\n            reason: 'URL must include ngrok-free.app domain',\r\n          });\r\n        }\r\n      }\r\n\r\n      // Create peer instance with consistent ID\r\n      this.peer = new Peer(this.clientId, {\r\n        ...this.config,\r\n        // Basic reliability options\r\n        reliable: true,\r\n        retries: 2,\r\n        timeout: isNgrok ? 5000 : 3000,\r\n        debug: 0, // Reduced from 3 to 0 to suppress verbose logs\r\n      });\r\n\r\n      // Move to connecting state (skip validation for local connections)\r\n      if (!isNgrok) {\r\n        this.state.setState(NgrokClientState.STATES.CONNECTING);\r\n      }\r\n\r\n      this.setupPeerEventHandlers();\r\n      this.startHealthCheck();\r\n    } catch (error) {\r\n      console.error('Peer initialization error:', error);\r\n      this.handleError(error);\r\n      this.state.setState(NgrokClientState.STATES.ERROR, {\r\n        error: error.message,\r\n        context: 'initialization',\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set up event handlers for the peer instance\r\n   * @private\r\n   */\r\n  setupPeerEventHandlers() {\r\n    this.peer.on('open', (id) => {\r\n      if (DEBUG.PEER) {\r\n        console.log('My peer ID is:', id);\r\n      }\r\n      // Already in CONNECTING state, proceed with connection\r\n      this.connect();\r\n    });\r\n\r\n    this.peer.on('error', (error) => {\r\n      console.error('Peer connection error:', error);\r\n\r\n      // Handle ID taken error by generating new ID\r\n      if (error.type === 'unavailable-id') {\r\n        if (DEBUG.PEER) {\r\n          console.log('Client ID taken, generating new ID');\r\n        }\r\n        this.clientId = this.generateClientId();\r\n        this._cleanup(false);\r\n        this.initialize();\r\n        return;\r\n      }\r\n\r\n      this.handleError(error);\r\n\r\n      // Set error state\r\n      this.state.setState(NgrokClientState.STATES.ERROR, {\r\n        error: error.message,\r\n        type: error.type,\r\n      });\r\n\r\n      // Attempt reconnection if appropriate\r\n      if (this.shouldAttemptReconnection(error)) {\r\n        this._handleReconnection(error);\r\n      }\r\n    });\r\n\r\n    this.peer.on('disconnected', () => {\r\n      if (DEBUG.PEER) {\r\n        console.log('Peer disconnected from server');\r\n      }\r\n      this.state.setState(NgrokClientState.STATES.DISCONNECTED, {\r\n        reason: 'peer_disconnected',\r\n      });\r\n      this._handleReconnection({ type: 'disconnected' });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start health check interval\r\n   * @private\r\n   */\r\n  startHealthCheck() {\r\n    // Clear any existing intervals\r\n    if (this.healthCheckInterval) {\r\n      clearInterval(this.healthCheckInterval);\r\n    }\r\n    if (this.pingInterval) {\r\n      clearInterval(this.pingInterval);\r\n    }\r\n\r\n    // Start health check\r\n    this.healthCheckInterval = setInterval(() => {\r\n      if (\r\n        this.state.getState() === NgrokClientState.STATES.CONNECTED &&\r\n        this.connection\r\n      ) {\r\n        this.checkConnectionHealth();\r\n      }\r\n    }, 10000);\r\n\r\n    // Start ping interval\r\n    this.pingInterval = setInterval(() => {\r\n      if (\r\n        this.state.getState() === NgrokClientState.STATES.CONNECTED &&\r\n        this.connection?.open\r\n      ) {\r\n        this.sendPing();\r\n      }\r\n    }, 5000);\r\n  }\r\n\r\n  /**\r\n   * Check connection health\r\n   * @private\r\n   */\r\n  async checkConnectionHealth() {\r\n    if (!this.connection?.open) {\r\n      console.warn('Connection appears dead, attempting recovery');\r\n      await this.handleConnectionFailure();\r\n      return;\r\n    }\r\n\r\n    // Check last ping time\r\n    const timeSinceLastPing = Date.now() - this.lastPingTime;\r\n    if (timeSinceLastPing > 15000) {\r\n      // No ping response for 15 seconds\r\n      console.warn('No ping response, connection may be dead');\r\n      await this.handleConnectionFailure();\r\n    }\r\n\r\n    // Update connection metrics\r\n    this.state.updateMetrics({\r\n      latency: timeSinceLastPing,\r\n      timestamp: new Date(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send ping to peer\r\n   * @private\r\n   */\r\n  sendPing() {\r\n    try {\r\n      this.connection.send({\r\n        event: 'ping',\r\n        data: { timestamp: Date.now() },\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to send ping:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle connection failure\r\n   * @private\r\n   */\r\n  async handleConnectionFailure() {\r\n    if (this.connection) {\r\n      try {\r\n        this.connection.close();\r\n      } catch (error) {\r\n        console.error('Error closing connection:', error);\r\n      }\r\n      this.connection = null;\r\n    }\r\n\r\n    this.state.setState(NgrokClientState.STATES.RECONNECTING, {\r\n      reason: 'connection_failure',\r\n      timestamp: new Date(),\r\n    });\r\n\r\n    await this._handleReconnection({ type: 'connection_failure' });\r\n  }\r\n\r\n  /**\r\n   * Handle errors with enhanced information\r\n   * @private\r\n   * @param {Error} error - The error that occurred\r\n   */\r\n  handleError(error) {\r\n    // Record error in state\r\n    this.state.recordError(error, {\r\n      type: error.type || 'server-error',\r\n      state: this.state.getState(),\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n\r\n    // Forward to message handler\r\n    const handler = this.messageHandlers.get('error');\r\n    if (handler) {\r\n      const errorInfo = {\r\n        status: 'error',\r\n        error: this._getErrorMessage(error),\r\n        details: {\r\n          type: error.type || 'server-error',\r\n          state: this.state.getState(),\r\n          timestamp: new Date().toISOString(),\r\n        },\r\n      };\r\n      handler(errorInfo);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user-friendly error message\r\n   * @private\r\n   * @param {Error} error - The error object\r\n   * @returns {string} User-friendly error message\r\n   */\r\n  _getErrorMessage(error) {\r\n    const errorMessages = {\r\n      network: 'Network error - Could not connect to peer server',\r\n      'invalid-id':\r\n        'Invalid ID - The peer ID is invalid or already taken',\r\n      'unavailable-id':\r\n        'ID Unavailable - The peer ID is already taken',\r\n      'browser-incompatible':\r\n        'Browser Incompatible - WebRTC is not supported',\r\n      'connection-failure':\r\n        'Connection failed - Unable to establish or maintain connection',\r\n      disconnected: 'Disconnected - Lost connection to peer server',\r\n    };\r\n\r\n    return (\r\n      errorMessages[error.type] ||\r\n      error.message ||\r\n      'Peer connection error'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Determine if reconnection should be attempted\r\n   * @private\r\n   * @param {Error} error - The error that occurred\r\n   * @returns {boolean} Whether to attempt reconnection\r\n   */\r\n  shouldAttemptReconnection(error) {\r\n    // Don't reconnect for certain error types\r\n    const fatalErrors = [\r\n      'browser-incompatible',\r\n      'invalid-id',\r\n      'invalid-key',\r\n    ];\r\n    if (fatalErrors.includes(error.type)) {\r\n      return false;\r\n    }\r\n\r\n    return this.state.getMetadata().metrics.reconnects.count < 3;\r\n  }\r\n\r\n  /**\r\n   * Set connection timeout with enhanced retry logic\r\n   * @private\r\n   */\r\n  _setConnectionTimeout() {\r\n    const timeoutDuration = 15000; // 15 second timeout for ngrok connections\r\n\r\n    setTimeout(() => {\r\n      if (\r\n        this.state.getState() !== NgrokClientState.STATES.CONNECTED\r\n      ) {\r\n        if (DEBUG.PEER) {\r\n          console.log('Connection attempt timed out');\r\n        }\r\n\r\n        if (this.shouldAttemptReconnection({ type: 'timeout' })) {\r\n          this._handleReconnection({ type: 'timeout' });\r\n        } else {\r\n          this.handleError({\r\n            type: 'timeout',\r\n            message: 'Connection timeout - Max attempts reached',\r\n          });\r\n        }\r\n      }\r\n    }, timeoutDuration);\r\n  }\r\n\r\n  /**\r\n   * Handle reconnection logic with improved retry strategy\r\n   * @private\r\n   * @param {Error} error - The error that triggered reconnection\r\n   */\r\n  async _handleReconnection(error) {\r\n    // Update state to reconnecting\r\n    this.state.setState(NgrokClientState.STATES.RECONNECTING, {\r\n      error: error.message,\r\n      attempt: this.state.getMetadata().metrics.reconnects.count + 1,\r\n    });\r\n\r\n    // Use exponential backoff with jitter\r\n    const baseDelay = Math.min(\r\n      2000 *\r\n        Math.pow(\r\n          1.5,\r\n          this.state.getMetadata().metrics.reconnects.count,\r\n        ),\r\n      15000,\r\n    );\r\n    const jitter = baseDelay * 0.2 * (Math.random() * 2 - 1);\r\n    const delay = Math.max(2000, baseDelay + jitter);\r\n\r\n    if (DEBUG.PEER) {\r\n      console.log(\r\n        `Attempting reconnection ${\r\n          this.state.getMetadata().metrics.reconnects.count + 1\r\n        } of 3 in ${Math.round(delay)}ms`,\r\n      );\r\n    }\r\n\r\n    // Wait for delay\r\n    await new Promise((resolve) => setTimeout(resolve, delay));\r\n\r\n    if (\r\n      this.state.getState() === NgrokClientState.STATES.RECONNECTING\r\n    ) {\r\n      if (DEBUG.PEER) {\r\n        console.log('Attempting to reconnect...');\r\n      }\r\n\r\n      // Clean up existing resources\r\n      await this._cleanup(false);\r\n\r\n      // Only try to reconnect if we haven't exceeded max attempts\r\n      if (this.shouldAttemptReconnection(error)) {\r\n        // Move back to connecting state\r\n        this.state.setState(NgrokClientState.STATES.CONNECTING);\r\n        this.initialize();\r\n      } else {\r\n        if (DEBUG.PEER) {\r\n          console.log('Max reconnection attempts reached');\r\n        }\r\n        this.state.setState(NgrokClientState.STATES.ERROR, {\r\n          error: 'Maximum reconnection attempts reached',\r\n          type: 'max_retries',\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up resources\r\n   * @private\r\n   * @param {boolean} [isClosing=true] - Whether this is a final cleanup\r\n   */\r\n  async _cleanup(isClosing = true) {\r\n    // Clean up existing peer\r\n    if (this.peer) {\r\n      this.peer.destroy();\r\n      this.peer = null;\r\n    }\r\n\r\n    // Clean up existing connection\r\n    if (this.connection) {\r\n      this.connection.close();\r\n      this.connection = null;\r\n    }\r\n\r\n    // Clear intervals if doing final cleanup\r\n    if (isClosing) {\r\n      if (this.healthCheckInterval) {\r\n        clearInterval(this.healthCheckInterval);\r\n        this.healthCheckInterval = null;\r\n      }\r\n      if (this.pingInterval) {\r\n        clearInterval(this.pingInterval);\r\n        this.pingInterval = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Connect to target peer with enhanced reliability\r\n   */\r\n  connect() {\r\n    try {\r\n      // Check if we already have a connection\r\n      if (this.peer.connections[this.targetPeerId]?.length > 0) {\r\n        const existingConn =\r\n          this.peer.connections[this.targetPeerId][0];\r\n        if (existingConn.open) {\r\n          if (DEBUG.PEER) {\r\n            console.log('Reusing existing connection');\r\n          }\r\n          this.connection = existingConn;\r\n          this.setupConnectionHandlers();\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Create new connection\r\n      if (DEBUG.PEER) {\r\n        console.log('Creating new connection to:', this.targetPeerId);\r\n      }\r\n      this.connection = this.peer.connect(this.targetPeerId, {\r\n        reliable: true,\r\n        serialization: 'binary', // Explicitly set to binary\r\n      });\r\n\r\n      this.setupConnectionHandlers();\r\n      this._setConnectionTimeout();\r\n    } catch (error) {\r\n      console.error('Error establishing connection:', error);\r\n      this._handleReconnection(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set up handlers for the peer connection\r\n   * @private\r\n   */\r\n  setupConnectionHandlers() {\r\n    this.connection.on('open', () => {\r\n      if (DEBUG.PEER) {\r\n        console.log('Connected to peer:', this.targetPeerId);\r\n      }\r\n\r\n      // Update state - Note: NgrokClientState allows connected->connected transition\r\n      // to handle multiple data channels opening on the same connection\r\n      this.state.setState(NgrokClientState.STATES.CONNECTED, {\r\n        peerId: this.targetPeerId,\r\n        timestamp: new Date(),\r\n      });\r\n\r\n      // Process any queued messages\r\n      this.processMessageQueue();\r\n\r\n      // Emit ready event\r\n      const handler = this.messageHandlers.get('ready');\r\n      if (handler) {\r\n        handler({\r\n          status: 'connected',\r\n          peerId: this.targetPeerId,\r\n          state: this.state.getState(),\r\n          timestamp: new Date().toISOString(),\r\n        });\r\n      }\r\n    });\r\n\r\n    this.connection.on('data', (data) => {\r\n      if (data.event === 'pong') {\r\n        this.lastPingTime = Date.now();\r\n        // Update latency metrics\r\n        const latency = Date.now() - data.data.timestamp;\r\n        this.state.updateMetrics({ latency });\r\n        return;\r\n      }\r\n      if (DEBUG.PEER) {\r\n        console.log('Received data from peer:', data);\r\n      }\r\n      this.handleIncomingData(data);\r\n    });\r\n\r\n    this.connection.on('close', () => {\r\n      if (DEBUG.PEER) {\r\n        console.log('Peer connection closed');\r\n      }\r\n\r\n      if (!this._isClosing) {\r\n        this.state.setState(NgrokClientState.STATES.DISCONNECTED, {\r\n          reason: 'connection_closed',\r\n        });\r\n        this._handleReconnection({ type: 'connection_closed' });\r\n      }\r\n    });\r\n\r\n    this.connection.on('error', (error) => {\r\n      console.error('Data connection error:', error);\r\n\r\n      this.state.setState(NgrokClientState.STATES.ERROR, {\r\n        error: error.message,\r\n        type: error.type,\r\n      });\r\n\r\n      this.handleError(error);\r\n      this._handleReconnection(error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle incoming data from peer with enhanced error handling\r\n   * @private\r\n   * @param {Object} data - Data received from peer\r\n   * @param {string} data.event - Event type\r\n   * @param {*} data.data - Event data\r\n   */\r\n  handleIncomingData(data) {\r\n    try {\r\n      if (DEBUG.PEER) {\r\n        console.log(\r\n          'PeerConnection: Received event:',\r\n          data.event,\r\n          'with data:',\r\n          data.data,\r\n        );\r\n      }\r\n\r\n      // First, try to find a specific handler for this event\r\n      const handler = this.messageHandlers.get(data.event);\r\n\r\n      if (handler) {\r\n        if (DEBUG.PEER) {\r\n          console.log(\r\n            'PeerConnection: Found specific handler for event:',\r\n            data.event,\r\n          );\r\n        }\r\n        handler({\r\n          ...data.data,\r\n          timestamp: Date.now(),\r\n          state: this.state.getState(),\r\n        });\r\n      } else {\r\n        if (DEBUG.PEER) {\r\n          console.log(\r\n            'PeerConnection: No specific handler for event:',\r\n            data.event,\r\n            'forwarding to data handler',\r\n          );\r\n        }\r\n        // If no specific handler is found, forward the event to the data handler\r\n        // This ensures all events are forwarded to the Kinectron class\r\n        const dataHandler = this.messageHandlers.get('data');\r\n\r\n        // if (data.event === 'bodyFrame') debugger;\r\n\r\n        if (dataHandler) {\r\n          dataHandler(data);\r\n        } else {\r\n          console.warn(\r\n            'PeerConnection: No data handler found for event:',\r\n            data.event,\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error handling incoming data:', error);\r\n      this.handleError({\r\n        type: 'data_handling_error',\r\n        message: 'Error processing received data',\r\n        originalError: error,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process queued messages\r\n   * @private\r\n   */\r\n  async processMessageQueue() {\r\n    while (\r\n      this.messageQueue.length > 0 &&\r\n      this.state.getState() === NgrokClientState.STATES.CONNECTED\r\n    ) {\r\n      const message = this.messageQueue.shift();\r\n      try {\r\n        await this.send(message.event, message.data);\r\n      } catch (error) {\r\n        console.error('Failed to send queued message:', error);\r\n        // Re-queue message if connection is still open\r\n        if (\r\n          this.state.getState() ===\r\n            NgrokClientState.STATES.CONNECTED &&\r\n          this.messageQueue.length < this.maxQueueSize\r\n        ) {\r\n          this.messageQueue.push(message);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register a handler for a specific event type with validation\r\n   * @param {string} event - Event type to handle\r\n   * @param {Function} handler - Handler function for the event\r\n   */\r\n  on(event, handler) {\r\n    if (typeof handler !== 'function') {\r\n      throw new Error('Handler must be a function');\r\n    }\r\n    this.messageHandlers.set(event, handler);\r\n  }\r\n\r\n  /**\r\n   * Send data to peer with enhanced reliability\r\n   * @param {string} event - Event type\r\n   * @param {*} data - Data to send\r\n   * @returns {Promise<void>}\r\n   */\r\n  async send(event, data) {\r\n    return new Promise((resolve, reject) => {\r\n      if (\r\n        this.state.getState() !== NgrokClientState.STATES.CONNECTED ||\r\n        !this.connection?.open\r\n      ) {\r\n        // Queue message if not connected\r\n        if (this.messageQueue.length < this.maxQueueSize) {\r\n          this.messageQueue.push({ event, data });\r\n          resolve(); // Resolve since message was queued\r\n        } else {\r\n          reject(new Error('Message queue full'));\r\n        }\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const message = {\r\n          event,\r\n          data,\r\n          timestamp: Date.now(),\r\n        };\r\n\r\n        const timeout = setTimeout(() => {\r\n          reject(new Error('Send timeout'));\r\n        }, 5000);\r\n\r\n        this.connection.send(message);\r\n        clearTimeout(timeout);\r\n        resolve();\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Close the peer connection with graceful shutdown\r\n   */\r\n  async close() {\r\n    this._isClosing = true;\r\n\r\n    // Send shutdown message if possible\r\n    if (this.connection?.open) {\r\n      try {\r\n        await this.send('shutdown', { reason: 'client_close' });\r\n      } catch (error) {\r\n        console.error('Error sending shutdown message:', error);\r\n      }\r\n    }\r\n\r\n    // Clean up resources\r\n    await this._cleanup(true);\r\n\r\n    // Reset state\r\n    this.state.reset();\r\n    this.messageQueue = [];\r\n    this._isClosing = false;\r\n  }\r\n\r\n  /**\r\n   * Check if peer is connected\r\n   * @returns {boolean} Connection status\r\n   */\r\n  isConnected() {\r\n    return (\r\n      this.state.getState() === NgrokClientState.STATES.CONNECTED &&\r\n      this.connection?.open\r\n    );\r\n  }\r\n}\r\n","import { NgrokValidationError, NgrokErrorCodes } from './errors.js';\r\n\r\n/**\r\n * Validates a ngrok URL format\r\n * @param {string} url - The URL to validate\r\n * @throws {NgrokValidationError} If URL is invalid\r\n */\r\nfunction validateNgrokUrl(url) {\r\n  if (!url.includes('ngrok-free.app')) {\r\n    throw new NgrokValidationError(\r\n      NgrokErrorCodes.INVALID_URL.message,\r\n      {\r\n        code: NgrokErrorCodes.INVALID_URL.code,\r\n        url,\r\n        reason: 'URL must include ngrok-free.app domain',\r\n      },\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {Object} PeerNetworkConfig\r\n * @property {string} host - The host address for the peer server\r\n * @property {number|string} port - The port number for the peer server\r\n * @property {string} path - The path for the peer server\r\n * @property {boolean} [secure] - Whether to use secure connection\r\n * @property {string} [role] - Role identifier for the connection (e.g., 'modern-test', 'legacy-test')\r\n */\r\n\r\n/**\r\n * Default peer network configuration\r\n * @type {PeerNetworkConfig}\r\n */\r\nexport const DEFAULT_PEER_CONFIG = {\r\n  host: '127.0.0.1',\r\n  port: 9001,\r\n  path: '/',\r\n  secure: false,\r\n  debug: 3, // Enable detailed logging\r\n  role: 'default', // Default role identifier\r\n  // For local connections, we don't need STUN/TURN servers\r\n  // This matches the original kinectron implementation\r\n  config: {\r\n    iceServers: [],\r\n    sdpSemantics: 'unified-plan',\r\n  },\r\n};\r\n\r\n/**\r\n * Default peer ID for the Kinectron server\r\n * @type {string}\r\n */\r\nexport const DEFAULT_PEER_ID = 'kinectron';\r\n\r\n/**\r\n * Validates and processes peer network configuration\r\n * @param {Object} config - User provided network configuration\r\n * @returns {PeerNetworkConfig} Processed network configuration\r\n */\r\nexport function processPeerConfig(config) {\r\n  if (!config) return DEFAULT_PEER_CONFIG;\r\n\r\n  // Handle ngrok addresses\r\n  if (typeof config === 'string' && config.includes('ngrok')) {\r\n    try {\r\n      validateNgrokUrl(config);\r\n      return {\r\n        host: config,\r\n        port: '443',\r\n        path: '/',\r\n        secure: true,\r\n        debug: 3,\r\n        config: {\r\n          iceServers: [],\r\n          sdpSemantics: 'unified-plan',\r\n        },\r\n      };\r\n    } catch (error) {\r\n      // Add connection context to validation errors\r\n      if (error instanceof NgrokValidationError) {\r\n        error.details.context = 'peer_config_validation';\r\n        error.details.timestamp = new Date().toISOString();\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Handle IP addresses or custom configs\r\n  if (typeof config === 'string') {\r\n    return {\r\n      ...DEFAULT_PEER_CONFIG,\r\n      host: config,\r\n    };\r\n  }\r\n\r\n  // Handle full custom config objects\r\n  return {\r\n    ...DEFAULT_PEER_CONFIG,\r\n    ...config,\r\n  };\r\n}\r\n","/**\r\n * Base class for ngrok-related errors\r\n */\r\nexport class NgrokError extends Error {\r\n  /**\r\n   * @param {string} message - Error message\r\n   * @param {Object} details - Additional error details\r\n   */\r\n  constructor(message, details = {}) {\r\n    super(message);\r\n    this.name = 'NgrokError';\r\n    this.details = details;\r\n    this.timestamp = new Date().toISOString();\r\n    this.troubleshooting = [\r\n      'Verify the ngrok tunnel is running',\r\n      'Check if the ngrok URL is correct',\r\n      'Ensure the Kinectron application is running',\r\n    ];\r\n  }\r\n}\r\n\r\n/**\r\n * Error for ngrok connection failures\r\n */\r\nexport class NgrokConnectionError extends NgrokError {\r\n  constructor(message, details = {}) {\r\n    super(message, {\r\n      ...details,\r\n      type: 'connection_error',\r\n    });\r\n    this.name = 'NgrokConnectionError';\r\n    this.troubleshooting = [\r\n      'Check if the ngrok tunnel is still active',\r\n      'Verify your internet connection',\r\n      'Try restarting the ngrok tunnel',\r\n      'Ensure no firewall is blocking the connection',\r\n    ];\r\n  }\r\n}\r\n\r\n/**\r\n * Error for ngrok connection timeouts\r\n */\r\nexport class NgrokTimeoutError extends NgrokError {\r\n  constructor(message, details = {}) {\r\n    super(message, {\r\n      ...details,\r\n      type: 'timeout_error',\r\n    });\r\n    this.name = 'NgrokTimeoutError';\r\n    this.troubleshooting = [\r\n      'The connection attempt timed out',\r\n      'Check your internet connection speed',\r\n      'Verify the Kinectron server is running',\r\n      'Try increasing the connection timeout',\r\n    ];\r\n  }\r\n}\r\n\r\n/**\r\n * Error for invalid ngrok configuration or URLs\r\n */\r\nexport class NgrokValidationError extends NgrokError {\r\n  constructor(message, details = {}) {\r\n    super(message, {\r\n      ...details,\r\n      type: 'validation_error',\r\n    });\r\n    this.name = 'NgrokValidationError';\r\n    this.troubleshooting = [\r\n      'Ensure the URL includes \"ngrok-free.app\"',\r\n      'Copy the URL directly from the Kinectron application',\r\n      'Make sure to include the full domain name',\r\n    ];\r\n  }\r\n}\r\n\r\n/**\r\n * Error codes and their descriptions\r\n */\r\nexport const NgrokErrorCodes = {\r\n  INVALID_URL: {\r\n    code: 'NGROK_001',\r\n    message: 'Invalid ngrok URL format',\r\n  },\r\n  CONNECTION_FAILED: {\r\n    code: 'NGROK_002',\r\n    message: 'Failed to establish ngrok connection',\r\n  },\r\n  CONNECTION_TIMEOUT: {\r\n    code: 'NGROK_003',\r\n    message: 'Connection attempt timed out',\r\n  },\r\n  TUNNEL_CLOSED: {\r\n    code: 'NGROK_004',\r\n    message: 'Ngrok tunnel was closed',\r\n  },\r\n  SERVER_UNREACHABLE: {\r\n    code: 'NGROK_005',\r\n    message: 'Unable to reach Kinectron server',\r\n  },\r\n};\r\n","/**\r\n * Represents a client-side ngrok connection state error\r\n */\r\nexport class NgrokClientError extends Error {\r\n  constructor(message, details = {}) {\r\n    super(message);\r\n    this.name = 'NgrokClientError';\r\n    this.details = details;\r\n    this.timestamp = new Date().toISOString();\r\n    this.troubleshooting = [\r\n      'Check if the ngrok tunnel is running',\r\n      'Verify the URL is correct',\r\n      'Ensure the Kinectron application is running',\r\n    ];\r\n  }\r\n}\r\n\r\n/**\r\n * Manages client-side ngrok connection state and metrics\r\n */\r\nexport class NgrokClientState {\r\n  /**\r\n   * Available connection states\r\n   */\r\n  static STATES = {\r\n    DISCONNECTED: 'disconnected',\r\n    VALIDATING: 'validating',\r\n    CONNECTING: 'connecting',\r\n    CONNECTED: 'connected',\r\n    RECONNECTING: 'reconnecting',\r\n    ERROR: 'error',\r\n  };\r\n\r\n  /**\r\n   * Valid state transitions\r\n   */\r\n  static VALID_TRANSITIONS = {\r\n    [NgrokClientState.STATES.DISCONNECTED]: [\r\n      NgrokClientState.STATES.VALIDATING,\r\n      NgrokClientState.STATES.CONNECTING,\r\n    ],\r\n    [NgrokClientState.STATES.VALIDATING]: [\r\n      NgrokClientState.STATES.CONNECTING,\r\n      NgrokClientState.STATES.ERROR,\r\n    ],\r\n    [NgrokClientState.STATES.CONNECTING]: [\r\n      NgrokClientState.STATES.CONNECTED,\r\n      NgrokClientState.STATES.RECONNECTING,\r\n      NgrokClientState.STATES.ERROR,\r\n      NgrokClientState.STATES.CONNECTING, // Allow re-entering connecting state\r\n    ],\r\n    [NgrokClientState.STATES.CONNECTED]: [\r\n      NgrokClientState.STATES.DISCONNECTED,\r\n      NgrokClientState.STATES.RECONNECTING,\r\n      NgrokClientState.STATES.ERROR,\r\n      NgrokClientState.STATES.CONNECTED, // Allow self-transition to refresh state\r\n    ],\r\n    [NgrokClientState.STATES.RECONNECTING]: [\r\n      NgrokClientState.STATES.CONNECTED,\r\n      NgrokClientState.STATES.CONNECTING,\r\n      NgrokClientState.STATES.ERROR,\r\n    ],\r\n    [NgrokClientState.STATES.ERROR]: [\r\n      NgrokClientState.STATES.DISCONNECTED,\r\n      NgrokClientState.STATES.CONNECTING,\r\n    ],\r\n  };\r\n\r\n  constructor() {\r\n    this.currentState = null; // Start with no state\r\n    this.metadata = {\r\n      url: null,\r\n      startTime: null,\r\n      lastStateChange: new Date(),\r\n      errorHistory: [],\r\n      metrics: {\r\n        latency: {\r\n          current: 0,\r\n          average: 0,\r\n          samples: [],\r\n        },\r\n        connectionQuality: 'unknown',\r\n        reconnects: {\r\n          count: 0,\r\n          lastAttempt: null,\r\n        },\r\n        errors: {\r\n          total: 0,\r\n          byType: {},\r\n        },\r\n      },\r\n    };\r\n\r\n    // Event handlers\r\n    this.handlers = {\r\n      stateChange: new Set(),\r\n      error: new Set(),\r\n      metrics: new Set(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Add event listener\r\n   * @param {string} event - Event type\r\n   * @param {Function} handler - Event handler\r\n   */\r\n  on(event, handler) {\r\n    if (this.handlers[event]) {\r\n      this.handlers[event].add(handler);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove event listener\r\n   * @param {string} event - Event type\r\n   * @param {Function} handler - Event handler\r\n   */\r\n  off(event, handler) {\r\n    if (this.handlers[event]) {\r\n      this.handlers[event].delete(handler);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit event to handlers\r\n   * @private\r\n   * @param {string} event - Event type\r\n   * @param {*} data - Event data\r\n   */\r\n  _emit(event, data) {\r\n    if (this.handlers[event]) {\r\n      this.handlers[event].forEach((handler) => handler(data));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current state\r\n   * @returns {string} Current state\r\n   */\r\n  getState() {\r\n    return this.currentState;\r\n  }\r\n\r\n  /**\r\n   * Get state metadata\r\n   * @returns {Object} State metadata\r\n   */\r\n  getMetadata() {\r\n    return {\r\n      ...this.metadata,\r\n      currentState: this.currentState,\r\n      uptime: this._calculateUptime(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update connection metrics\r\n   * @param {Object} metrics - New metrics\r\n   */\r\n  updateMetrics(metrics) {\r\n    // Update latency\r\n    if (metrics.latency !== undefined) {\r\n      this.metadata.metrics.latency.current = metrics.latency;\r\n      this.metadata.metrics.latency.samples.push({\r\n        value: metrics.latency,\r\n        timestamp: new Date(),\r\n      });\r\n\r\n      // Keep last 10 samples\r\n      if (this.metadata.metrics.latency.samples.length > 10) {\r\n        this.metadata.metrics.latency.samples.shift();\r\n      }\r\n\r\n      // Calculate average\r\n      this.metadata.metrics.latency.average =\r\n        this.metadata.metrics.latency.samples.reduce(\r\n          (sum, sample) => sum + sample.value,\r\n          0,\r\n        ) / this.metadata.metrics.latency.samples.length;\r\n    }\r\n\r\n    // Update connection quality based on metrics\r\n    this._updateConnectionQuality();\r\n\r\n    // Emit metrics update\r\n    this._emit('metrics', this.metadata.metrics);\r\n  }\r\n\r\n  /**\r\n   * Set connection state\r\n   * @param {string} newState - New state\r\n   * @param {Object} details - Transition details\r\n   * @throws {NgrokClientError} If transition is invalid\r\n   */\r\n  setState(newState, details = {}) {\r\n    if (!this._isValidTransition(newState)) {\r\n      throw new NgrokClientError(\r\n        `Invalid state transition from ${this.currentState} to ${newState}`,\r\n        {\r\n          from: this.currentState,\r\n          to: newState,\r\n          details,\r\n        },\r\n      );\r\n    }\r\n\r\n    const oldState = this.currentState;\r\n    this.currentState = newState;\r\n    this.metadata.lastStateChange = new Date();\r\n\r\n    // Update metadata based on state\r\n    if (newState === NgrokClientState.STATES.CONNECTED) {\r\n      if (!this.metadata.startTime) {\r\n        this.metadata.startTime = new Date();\r\n      }\r\n    } else if (newState === NgrokClientState.STATES.RECONNECTING) {\r\n      this.metadata.metrics.reconnects.count++;\r\n      this.metadata.metrics.reconnects.lastAttempt = new Date();\r\n    }\r\n\r\n    // Emit state change event\r\n    this._emit('stateChange', {\r\n      from: oldState,\r\n      to: newState,\r\n      timestamp: this.metadata.lastStateChange,\r\n      details,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Record an error\r\n   * @param {Error} error - Error to record\r\n   * @param {Object} context - Error context\r\n   */\r\n  recordError(error, context = {}) {\r\n    const errorRecord = {\r\n      name: error.name,\r\n      message: error.message,\r\n      timestamp: new Date(),\r\n      context,\r\n      state: this.currentState,\r\n    };\r\n\r\n    // Add to error history (keep last 10)\r\n    this.metadata.errorHistory.unshift(errorRecord);\r\n    if (this.metadata.errorHistory.length > 10) {\r\n      this.metadata.errorHistory.pop();\r\n    }\r\n\r\n    // Update error metrics\r\n    this.metadata.metrics.errors.total++;\r\n    this.metadata.metrics.errors.byType[error.name] =\r\n      (this.metadata.metrics.errors.byType[error.name] || 0) + 1;\r\n\r\n    // Emit error event\r\n    this._emit('error', errorRecord);\r\n  }\r\n\r\n  /**\r\n   * Reset state to initial values\r\n   */\r\n  reset() {\r\n    this.currentState = null;\r\n    this.metadata = {\r\n      url: null,\r\n      startTime: null,\r\n      lastStateChange: new Date(),\r\n      errorHistory: [],\r\n      metrics: {\r\n        latency: {\r\n          current: 0,\r\n          average: 0,\r\n          samples: [],\r\n        },\r\n        connectionQuality: 'unknown',\r\n        reconnects: {\r\n          count: 0,\r\n          lastAttempt: null,\r\n        },\r\n        errors: {\r\n          total: 0,\r\n          byType: {},\r\n        },\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate connection uptime\r\n   * @private\r\n   * @returns {number} Uptime in milliseconds\r\n   */\r\n  _calculateUptime() {\r\n    if (\r\n      !this.metadata.startTime ||\r\n      this.currentState !== NgrokClientState.STATES.CONNECTED\r\n    ) {\r\n      return 0;\r\n    }\r\n    return Date.now() - this.metadata.startTime.getTime();\r\n  }\r\n\r\n  /**\r\n   * Update connection quality based on metrics\r\n   * @private\r\n   */\r\n  _updateConnectionQuality() {\r\n    const avgLatency = this.metadata.metrics.latency.average;\r\n    const recentErrors = this.metadata.errorHistory.filter(\r\n      (e) => Date.now() - new Date(e.timestamp).getTime() < 60000, // Last minute\r\n    ).length;\r\n\r\n    if (recentErrors > 2) {\r\n      this.metadata.metrics.connectionQuality = 'poor';\r\n    } else if (avgLatency > 1000) {\r\n      // 1 second\r\n      this.metadata.metrics.connectionQuality = 'unstable';\r\n    } else if (avgLatency > 500) {\r\n      // 500ms\r\n      this.metadata.metrics.connectionQuality = 'fair';\r\n    } else {\r\n      this.metadata.metrics.connectionQuality = 'good';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if state transition is valid\r\n   * @private\r\n   * @param {string} newState - State to transition to\r\n   * @returns {boolean} Whether transition is valid\r\n   */\r\n  _isValidTransition(newState) {\r\n    // Allow any initial state transition\r\n    if (this.currentState === null) {\r\n      return true;\r\n    }\r\n    const validNextStates =\r\n      NgrokClientState.VALID_TRANSITIONS[this.currentState];\r\n    return validNextStates && validNextStates.includes(newState);\r\n  }\r\n}\r\n","/**\r\n * Debug configuration for Kinectron client\r\n * Controls logging output for different components\r\n */\r\n\r\nexport const DEBUG = {\r\n  // Master switches for components\r\n  FRAMES: false, // Master switch for frame-related logging\r\n  HANDLERS: false, // Master switch for handler-related logging\r\n  PEER: false, // Master switch for peer connection logs\r\n\r\n  // Specific logging categories\r\n  PERFORMANCE: false, // For performance-related logs\r\n  DATA: false, // For data integrity logs\r\n  NETWORK: false, // For network-related logs\r\n\r\n  // Helper method to enable all logs\r\n  enableAll: function () {\r\n    Object.keys(this).forEach((key) => {\r\n      if (typeof this[key] === 'boolean') this[key] = true;\r\n    });\r\n  },\r\n\r\n  // Helper method to disable all logs\r\n  disableAll: function () {\r\n    Object.keys(this).forEach((key) => {\r\n      if (typeof this[key] === 'boolean') this[key] = false;\r\n    });\r\n  },\r\n};\r\n\r\n/**\r\n * Logging utility functions that check debug flags\r\n */\r\nexport const log = {\r\n  // Always log errors regardless of debug flags\r\n  error: function (message, ...args) {\r\n    console.error(message, ...args);\r\n  },\r\n\r\n  // Always log warnings regardless of debug flags\r\n  warn: function (message, ...args) {\r\n    console.warn(message, ...args);\r\n  },\r\n\r\n  // Always log info messages regardless of debug flags\r\n  info: function (message, ...args) {\r\n    console.log(message, ...args);\r\n  },\r\n\r\n  // Only log if the specified debug flag is enabled\r\n  debug: function (flag, message, ...args) {\r\n    if (DEBUG[flag]) {\r\n      console.debug(`[${flag}] ${message}`, ...args);\r\n    }\r\n  },\r\n\r\n  // Only log frame-related messages if FRAMES flag is enabled\r\n  frame: function (message, ...args) {\r\n    if (DEBUG.FRAMES) {\r\n      console.debug(`[FRAMES] ${message}`, ...args);\r\n    }\r\n  },\r\n\r\n  // Only log handler-related messages if HANDLERS flag is enabled\r\n  handler: function (message, ...args) {\r\n    if (DEBUG.HANDLERS) {\r\n      console.debug(`[HANDLERS] ${message}`, ...args);\r\n    }\r\n  },\r\n\r\n  // Only log peer-related messages if PEER flag is enabled\r\n  peer: function (message, ...args) {\r\n    if (DEBUG.PEER) {\r\n      console.debug(`[PEER] ${message}`, ...args);\r\n    }\r\n  },\r\n\r\n  // Only log performance-related messages if PERFORMANCE flag is enabled\r\n  performance: function (message, ...args) {\r\n    if (DEBUG.PERFORMANCE) {\r\n      console.debug(`[PERFORMANCE] ${message}`, ...args);\r\n    }\r\n  },\r\n\r\n  // Only log data-related messages if DATA flag is enabled\r\n  data: function (message, ...args) {\r\n    if (DEBUG.DATA) {\r\n      console.debug(`[DATA] ${message}`, ...args);\r\n    }\r\n  },\r\n\r\n  // Only log network-related messages if NETWORK flag is enabled\r\n  network: function (message, ...args) {\r\n    if (DEBUG.NETWORK) {\r\n      console.debug(`[NETWORK] ${message}`, ...args);\r\n    }\r\n  },\r\n};\r\n","/**\r\n * Stream handler factory functions\r\n */\r\n\r\nimport * as imageUtils from '../utils/imageProcessing.js';\r\nimport { DEBUG, log } from '../utils/debug.js';\r\n\r\n/**\r\n * Create a frame handler for image-based streams\r\n * @param {string} streamType - The type of stream ('color', 'depth', 'key', etc.)\r\n * @param {Function} callback - The callback to receive processed frames\r\n * @returns {Function} - The frame handler function\r\n */\r\nexport function createFrameHandler(streamType, callback) {\r\n  return (data) => {\r\n    // Extract the actual frame data\r\n    const frameData = data.data || data;\r\n\r\n    log.handler(\r\n      `Frame handler for ${streamType} received:`,\r\n      frameData,\r\n    );\r\n\r\n    // Check for both imagedata and imageData formats\r\n    const hasImageData = frameData.imagedata || frameData.imageData;\r\n\r\n    // Only process frames with matching name\r\n    if (frameData.name === streamType && hasImageData) {\r\n      // Normalize the data structure to ensure imagedata exists\r\n      if (frameData.imageData && !frameData.imagedata) {\r\n        frameData.imagedata = frameData.imageData;\r\n      }\r\n\r\n      // Process the image data\r\n      imageUtils.processImageData(frameData, callback);\r\n    } else {\r\n      log.warn(\r\n        `Received frame event but it's not a valid ${streamType} frame:`,\r\n        'name=',\r\n        frameData.name,\r\n        'has imagedata=',\r\n        !!(frameData.imagedata || frameData.imageData),\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Create a handler for raw depth data\r\n * @param {Function} callback - The callback to receive processed frames\r\n * @param {Function} unpackFunction - Function to unpack raw depth data\r\n * @returns {Function} - The raw depth handler function\r\n */\r\nexport function createRawDepthHandler(callback, unpackFunction) {\r\n  return (data) => {\r\n    if (data && data.imagedata) {\r\n      // Process the data regardless of isPacked flag\r\n      // The new implementation always unpacks the data\r\n      unpackFunction(\r\n        data.imagedata,\r\n        data.width,\r\n        data.height,\r\n        data.width, // originalWidth is the same as width in new implementation\r\n        data.testValues, // Pass test values to unpacking function\r\n      )\r\n        .then((depthValues) => {\r\n          // Call the callback with the unpacked data\r\n          callback({\r\n            ...data,\r\n            depthValues: depthValues,\r\n            timestamp: data.timestamp || Date.now(),\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          log.error('Error unpacking raw depth data:', error);\r\n          // Still call the callback with the original data\r\n          callback({\r\n            ...data,\r\n            error: 'Failed to unpack depth data: ' + error.message,\r\n            timestamp: data.timestamp || Date.now(),\r\n          });\r\n        });\r\n    } else if (data && data.rawDepthData) {\r\n      // Legacy format - raw depth data is already in a usable format\r\n      callback({\r\n        ...data,\r\n        timestamp: data.timestamp || Date.now(),\r\n      });\r\n    } else {\r\n      log.warn(\r\n        'Received raw depth frame with invalid data format:',\r\n        data,\r\n      );\r\n      callback({\r\n        ...data,\r\n        error: 'Invalid data format',\r\n        timestamp: data.timestamp || Date.now(),\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Create a handler for body tracking data\r\n * @param {Function} callback - The callback to receive processed frames\r\n * @returns {Function} - The body handler function\r\n */\r\nexport function createBodyHandler(callback) {\r\n  log.handler('Creating body handler with callback:', callback);\r\n\r\n  return (eventData) => {\r\n    const bodyData = eventData.data;\r\n    if (bodyData && bodyData.bodies) {\r\n      // Body data is already in a usable format (array of body objects)\r\n      // Just add timestamp and pass it through\r\n      callback({\r\n        bodies: bodyData.bodies,\r\n        timestamp: bodyData.timestamp || Date.now(),\r\n        floorClipPlane: bodyData.floorClipPlane,\r\n        trackingId: bodyData.trackingId,\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Create a handler for multi-frame data\r\n * @param {Function} callback - The callback to receive processed frames\r\n * @returns {Function} - The multi-frame handler function\r\n */\r\nexport function createMultiFrameHandler(callback) {\r\n  return (data) => {\r\n    if (data && data.frames) {\r\n      // Process each frame based on its type\r\n      const processedFrames = {};\r\n\r\n      // Process each frame in the multiframe data\r\n      Object.entries(data.frames).forEach(([type, frameData]) => {\r\n        if (frameData.imagedata) {\r\n          // For image-based frames, convert to data URL\r\n          const canvas = document.createElement('canvas');\r\n          const ctx = canvas.getContext('2d');\r\n          const { width, height } = frameData.imagedata;\r\n\r\n          canvas.width = width;\r\n          canvas.height = height;\r\n\r\n          // Create ImageData object from the raw data\r\n          const imgData = new ImageData(\r\n            imageUtils.convertToUint8ClampedArray(\r\n              frameData.imagedata.data,\r\n            ),\r\n            width,\r\n            height,\r\n          );\r\n\r\n          // Put the image data on the canvas\r\n          ctx.putImageData(imgData, 0, 0);\r\n\r\n          // Convert to data URL\r\n          processedFrames[type] = {\r\n            src: canvas.toDataURL('image/jpeg'),\r\n            width,\r\n            height,\r\n            raw: frameData.imagedata,\r\n          };\r\n        } else {\r\n          // For non-image data (like body tracking), pass through\r\n          processedFrames[type] = frameData;\r\n        }\r\n      });\r\n\r\n      // Call the user callback with processed frames\r\n      callback({\r\n        frames: processedFrames,\r\n        timestamp: data.timestamp || Date.now(),\r\n      });\r\n    }\r\n  };\r\n}\r\n","/**\r\n * Utility functions for processing image data from different streams\r\n */\r\n\r\nimport { DEBUG, log } from './debug.js';\r\n\r\n/**\r\n * Process image data from a frame\r\n * @param {Object} frameData - The frame data containing image information\r\n * @param {number} width - The width of the image\r\n * @param {number} height - The height of the image\r\n * @param {Function} callback - Callback to receive the processed image\r\n */\r\nexport function processImageData(frameData, callback) {\r\n  // Check for both imagedata and imageData formats\r\n  const imagedata = frameData.imagedata || frameData.imageData;\r\n\r\n  if (!frameData || !imagedata) {\r\n    log.warn('Invalid frame data received:', frameData);\r\n    return;\r\n  }\r\n\r\n  const { width, height } = imagedata;\r\n\r\n  // Create a canvas to convert image data to a data URL\r\n  const canvas = document.createElement('canvas');\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n\r\n  try {\r\n    // Check if data is a string (data URL)\r\n    if (typeof imagedata.data === 'string') {\r\n      log.data('Processing image data from data URL');\r\n      createImageFromDataUrl(\r\n        imagedata.data,\r\n        width,\r\n        height,\r\n        (src) => {\r\n          // Call the user callback with processed frame\r\n          callback({\r\n            src,\r\n            width,\r\n            height,\r\n            raw: imagedata,\r\n            timestamp: frameData.timestamp || Date.now(),\r\n          });\r\n        },\r\n        (err) => {\r\n          log.error('Error loading image from data URL:', err);\r\n          // Try to call callback anyway with the raw data\r\n          callback({\r\n            src: imagedata.data,\r\n            width,\r\n            height,\r\n            raw: imagedata,\r\n            timestamp: frameData.timestamp || Date.now(),\r\n          });\r\n        },\r\n      );\r\n    } else {\r\n      log.data('Processing image data from raw pixel data');\r\n      // Handle raw pixel data\r\n      const pixelData = convertToUint8ClampedArray(imagedata.data);\r\n      const imgData = new ImageData(pixelData, width, height);\r\n\r\n      // Put the image data on the canvas\r\n      ctx.putImageData(imgData, 0, 0);\r\n\r\n      // Convert to data URL for easy display\r\n      const src = canvas.toDataURL('image/jpeg');\r\n\r\n      // Call the user callback with processed frame\r\n      callback({\r\n        src,\r\n        width,\r\n        height,\r\n        raw: imagedata,\r\n        timestamp: frameData.timestamp || Date.now(),\r\n      });\r\n    }\r\n  } catch (error) {\r\n    log.error('Error processing frame:', error);\r\n    log.error('Frame data:', imagedata);\r\n  }\r\n}\r\n\r\n/**\r\n * Create an image from a data URL\r\n * @param {string} dataUrl - The data URL\r\n * @param {number} width - The width of the image\r\n * @param {number} height - The height of the image\r\n * @param {Function} onSuccess - Success callback with the data URL\r\n * @param {Function} onError - Error callback\r\n */\r\nexport function createImageFromDataUrl(\r\n  dataUrl,\r\n  width,\r\n  height,\r\n  onSuccess,\r\n  onError,\r\n) {\r\n  const canvas = document.createElement('canvas');\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n\r\n  // Create an image from the data URL\r\n  const img = new Image();\r\n\r\n  img.onload = () => {\r\n    // Draw the image to the canvas\r\n    ctx.drawImage(img, 0, 0, width, height);\r\n\r\n    // Use the original data URL\r\n    onSuccess(dataUrl);\r\n  };\r\n\r\n  // Set error handler\r\n  img.onerror = (err) => {\r\n    if (onError) {\r\n      onError(err);\r\n    }\r\n  };\r\n\r\n  // Start loading the image\r\n  img.src = dataUrl;\r\n}\r\n\r\n/**\r\n * Convert various data formats to Uint8ClampedArray\r\n * @param {*} data - The data to convert\r\n * @returns {Uint8ClampedArray} - The converted data\r\n */\r\nexport function convertToUint8ClampedArray(data) {\r\n  if (data instanceof Uint8ClampedArray) {\r\n    return data;\r\n  } else if (data instanceof Uint8Array) {\r\n    return new Uint8ClampedArray(data);\r\n  } else if (Array.isArray(data)) {\r\n    return new Uint8ClampedArray(data);\r\n  } else {\r\n    // Handle case where data is an object (e.g., from JSON)\r\n    return new Uint8ClampedArray(Object.values(data));\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"kinectron.cjs.js.map"}